"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const api_token_middleware_1 = __importDefault(require("./api-token-middleware"));
const no_logger_1 = __importDefault(require("../../test/fixtures/no-logger"));
const permissions_1 = require("../types/permissions");
const test_config_1 = require("../../test/config/test-config");
const api_user_1 = __importDefault(require("../types/api-user"));
let config;
beforeEach(() => {
    config = {
        getLogger: no_logger_1.default,
        authentication: {
            enableApiToken: true,
        },
    };
});
test('should not do anything if request does not contain a authorization', async () => {
    const apiTokenService = {
        getUserForToken: jest.fn(),
    };
    const func = api_token_middleware_1.default(config, { apiTokenService });
    const cb = jest.fn();
    const req = {
        header: jest.fn(),
    };
    await func(req, undefined, cb);
    expect(req.header).toHaveBeenCalledTimes(1);
    expect(cb).toHaveBeenCalledTimes(1);
});
test('should not add user if unknown token', async () => {
    const apiTokenService = {
        getUserForToken: jest.fn(),
    };
    const func = api_token_middleware_1.default(config, { apiTokenService });
    const cb = jest.fn();
    const req = {
        header: jest.fn().mockReturnValue('some-token'),
        user: undefined,
    };
    await func(req, undefined, cb);
    expect(cb).toHaveBeenCalled();
    expect(req.header).toHaveBeenCalled();
    expect(req.user).toBeFalsy();
});
test('should add user if unknown token', async () => {
    const apiUser = new api_user_1.default({
        username: 'default',
        permissions: [permissions_1.CLIENT],
    });
    const apiTokenService = {
        getUserForToken: jest.fn().mockReturnValue(apiUser),
    };
    const func = api_token_middleware_1.default(config, { apiTokenService });
    const cb = jest.fn();
    const req = {
        header: jest.fn().mockReturnValue('some-known-token'),
        user: undefined,
    };
    await func(req, undefined, cb);
    expect(cb).toHaveBeenCalled();
    expect(req.header).toHaveBeenCalled();
    expect(req.user).toBe(apiUser);
});
test('should not add user if disabled', async () => {
    const apiUser = new api_user_1.default({
        username: 'default',
        permissions: [permissions_1.CLIENT],
    });
    const apiTokenService = {
        getUserForToken: jest.fn().mockReturnValue(apiUser),
    };
    const disabledConfig = test_config_1.createTestConfig({
        getLogger: no_logger_1.default,
        authentication: {
            enableApiToken: false,
            createAdminUser: false,
        },
    });
    const func = api_token_middleware_1.default(disabledConfig, { apiTokenService });
    const cb = jest.fn();
    const req = {
        header: jest.fn().mockReturnValue('some-known-token'),
        user: undefined,
    };
    await func(req, undefined, cb);
    expect(cb).toHaveBeenCalled();
    expect(req.user).toBeFalsy();
});
test('should call next if apiTokenService throws', async () => {
    no_logger_1.default.setMuteError(true);
    const apiTokenService = {
        getUserForToken: () => {
            throw new Error('hi there, i am stupid');
        },
    };
    const func = api_token_middleware_1.default(config, { apiTokenService });
    const cb = jest.fn();
    const req = {
        header: jest.fn().mockReturnValue('some-token'),
        user: undefined,
    };
    await func(req, undefined, cb);
    expect(cb).toHaveBeenCalled();
    no_logger_1.default.setMuteError(false);
});
test('should call next if apiTokenService throws x2', async () => {
    const apiTokenService = {
        getUserForToken: () => {
            throw new Error('hi there, i am stupid');
        },
    };
    const func = api_token_middleware_1.default(config, { apiTokenService });
    const cb = jest.fn();
    const req = {
        header: jest.fn().mockReturnValue('some-token'),
        user: undefined,
    };
    await func(req, undefined, cb);
    expect(cb).toHaveBeenCalled();
});
//# sourceMappingURL=api-token-middleware.test.js.map