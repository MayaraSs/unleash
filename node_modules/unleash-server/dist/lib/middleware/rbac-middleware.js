"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/explicit-module-boundary-types */
const permissions_1 = require("../types/permissions");
const rbacMiddleware = (config, { featureToggleStore }, accessService) => {
    const logger = config.getLogger('/middleware/rbac-middleware.js');
    logger.info('Enabling RBAC');
    return (req, res, next) => {
        req.checkRbac = async (permission) => {
            const { user, params } = req;
            if (!user) {
                logger.error('RBAC requires a user to exist on the request.');
                return false;
            }
            if (user.isAPI) {
                return user.permissions.includes(permissions_1.ADMIN);
            }
            if (!user.id) {
                logger.error('RBAC requires the user to have a unique id.');
                return false;
            }
            // For /api/admin/projects/:projectId we will find it as part of params
            let { projectId } = params;
            // Temporary workaround to figure out projectId for feature toggle updates.
            if (permission === permissions_1.DELETE_FEATURE) {
                const { featureName } = params;
                projectId = await featureToggleStore.getProjectId(featureName);
            }
            else if (permission === permissions_1.UPDATE_FEATURE) {
                // if projectId of feature is different from project in body
                // need to check that we have UPDATE_FEATURE access on both old and new project
                // TODO: Look at this to make it smoother once we get around to looking at project
                // Changing project of a toggle should most likely be a separate endpoint
                const { featureName } = params;
                projectId = await featureToggleStore.getProjectId(featureName);
                const newProjectId = req.body
                    ? req.body.project || projectId
                    : projectId;
                if (newProjectId !== projectId) {
                    return (accessService.hasPermission(user, permission, projectId) &&
                        accessService.hasPermission(user, permission, newProjectId));
                }
            }
            else if (permission === permissions_1.CREATE_FEATURE) {
                projectId = req.body.project || 'default';
            }
            return accessService.hasPermission(user, permission, projectId);
        };
        return next();
    };
};
module.exports = rbacMiddleware;
exports.default = rbacMiddleware;
//# sourceMappingURL=rbac-middleware.js.map