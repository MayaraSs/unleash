"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createMetricsMonitor = void 0;
const prom_client_1 = __importDefault(require("prom-client"));
const events = __importStar(require("./metric-events"));
const events_1 = require("./types/events");
const THREE_HOURS = 3 * 60 * 60 * 1000;
const ONE_MINUTE = 60 * 1000;
class MetricsMonitor {
    constructor() {
        this.timer = null;
        this.poolMetricsTimer = null;
    }
    startMonitoring(config, stores, version, eventBus) {
        if (!config.server.serverMetrics) {
            return;
        }
        const { eventStore, clientMetricsStore, featureToggleStore } = stores;
        prom_client_1.default.collectDefaultMetrics();
        const requestDuration = new prom_client_1.default.Summary({
            name: 'http_request_duration_milliseconds',
            help: 'App response time',
            labelNames: ['path', 'method', 'status'],
            percentiles: [0.1, 0.5, 0.9, 0.95, 0.99],
        });
        const dbDuration = new prom_client_1.default.Summary({
            name: 'db_query_duration_seconds',
            help: 'DB query duration time',
            labelNames: ['store', 'action'],
            percentiles: [0.1, 0.5, 0.9, 0.95, 0.99],
        });
        const featureToggleUpdateTotal = new prom_client_1.default.Counter({
            name: 'feature_toggle_update_total',
            help: 'Number of times a toggle has  been updated',
            labelNames: ['toggle'],
        });
        const featureToggleUsageTotal = new prom_client_1.default.Counter({
            name: 'feature_toggle_usage_total',
            help: 'Number of times a feature toggle has been used',
            labelNames: ['toggle', 'active', 'appName'],
        });
        const featureTogglesTotal = new prom_client_1.default.Gauge({
            name: 'feature_toggles_total',
            help: 'Number of feature toggles',
            labelNames: ['version'],
        });
        async function collectFeatureToggleMetrics() {
            featureTogglesTotal.reset();
            let togglesCount;
            try {
                togglesCount = await featureToggleStore.count();
                // eslint-disable-next-line no-empty
            }
            catch (e) { }
            togglesCount = togglesCount || 0;
            featureTogglesTotal.labels(version).set(togglesCount);
        }
        collectFeatureToggleMetrics();
        this.timer = setInterval(() => collectFeatureToggleMetrics(), THREE_HOURS).unref();
        eventBus.on(events.REQUEST_TIME, ({ path, method, time, statusCode }) => {
            requestDuration.labels(path, method, statusCode).observe(time);
        });
        eventBus.on(events.DB_TIME, ({ store, action, time }) => {
            dbDuration.labels(store, action).observe(time);
        });
        eventStore.on(events_1.FEATURE_CREATED, ({ data }) => {
            featureToggleUpdateTotal.labels(data.name).inc();
        });
        eventStore.on(events_1.FEATURE_UPDATED, ({ data }) => {
            featureToggleUpdateTotal.labels(data.name).inc();
        });
        eventStore.on(events_1.FEATURE_ARCHIVED, ({ data }) => {
            featureToggleUpdateTotal.labels(data.name).inc();
        });
        eventStore.on(events_1.FEATURE_REVIVED, ({ data }) => {
            featureToggleUpdateTotal.labels(data.name).inc();
        });
        clientMetricsStore.on('metrics', m => {
            // eslint-disable-next-line no-restricted-syntax
            for (const entry of Object.entries(m.bucket.toggles)) {
                featureToggleUsageTotal
                    .labels(entry[0], 'true', m.appName)
                    // @ts-ignore
                    .inc(entry[1].yes);
                featureToggleUsageTotal
                    .labels(entry[0], 'false', m.appName)
                    // @ts-ignore
                    .inc(entry[1].no);
            }
        });
        this.configureDbMetrics(stores.db, eventBus);
    }
    stopMonitoring() {
        clearInterval(this.timer);
        clearInterval(this.poolMetricsTimer);
    }
    configureDbMetrics(db, eventBus) {
        if (db && db.client) {
            const dbPoolMin = new prom_client_1.default.Gauge({
                name: 'db_pool_min',
                help: 'Minimum DB pool size',
            });
            dbPoolMin.set(db.client.pool.min);
            const dbPoolMax = new prom_client_1.default.Gauge({
                name: 'db_pool_max',
                help: 'Maximum DB pool size',
            });
            dbPoolMax.set(db.client.pool.max);
            const dbPoolFree = new prom_client_1.default.Gauge({
                name: 'db_pool_free',
                help: 'Current free connections in DB pool',
            });
            const dbPoolUsed = new prom_client_1.default.Gauge({
                name: 'db_pool_used',
                help: 'Current connections in use in DB pool',
            });
            const dbPoolPendingCreates = new prom_client_1.default.Gauge({
                name: 'db_pool_pending_creates',
                help: 'how many asynchronous create calls are running in DB pool',
            });
            const dbPoolPendingAcquires = new prom_client_1.default.Gauge({
                name: 'db_pool_pending_acquires',
                help: 'how many acquires are waiting for a resource to be released in DB pool',
            });
            eventBus.on(events_1.DB_POOL_UPDATE, data => {
                dbPoolFree.set(data.free);
                dbPoolUsed.set(data.used);
                dbPoolPendingCreates.set(data.pendingCreates);
                dbPoolPendingAcquires.set(data.pendingAcquires);
            });
            this.registerPoolMetrics(db.client.pool, eventBus);
            this.poolMetricsTimer = setInterval(() => this.registerPoolMetrics(db.client.pool, eventBus), ONE_MINUTE);
            this.poolMetricsTimer.unref();
        }
    }
    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
    registerPoolMetrics(pool, eventBus) {
        try {
            eventBus.emit(events_1.DB_POOL_UPDATE, {
                used: pool.numUsed(),
                free: pool.numFree(),
                pendingCreates: pool.numPendingCreates(),
                pendingAcquires: pool.numPendingAcquires(),
            });
            // eslint-disable-next-line no-empty
        }
        catch (e) { }
    }
}
exports.default = MetricsMonitor;
function createMetricsMonitor() {
    return new MetricsMonitor();
}
exports.createMetricsMonitor = createMetricsMonitor;
module.exports = {
    createMetricsMonitor,
};
//# sourceMappingURL=metrics.js.map