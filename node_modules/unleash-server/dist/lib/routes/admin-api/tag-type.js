'use strict';
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const controller_1 = __importDefault(require("../controller"));
const permissions_1 = require("../../types/permissions");
const util_1 = require("./util");
const extract_user_1 = __importDefault(require("../../extract-user"));
const version = 1;
class TagTypeController extends controller_1.default {
    constructor(config, { tagTypeService }) {
        super(config);
        this.logger = config.getLogger('/admin-api/tag-type.js');
        this.tagTypeService = tagTypeService;
        this.get('/', this.getTagTypes);
        this.post('/', this.createTagType, permissions_1.UPDATE_FEATURE);
        this.post('/validate', this.validate);
        this.get('/:name', this.getTagType);
        this.put('/:name', this.updateTagType, permissions_1.UPDATE_FEATURE);
        this.delete('/:name', this.deleteTagType, permissions_1.UPDATE_FEATURE);
    }
    async getTagTypes(req, res) {
        try {
            const tagTypes = await this.tagTypeService.getAll();
            res.json({ version, tagTypes });
        }
        catch (e) {
            util_1.handleErrors(res, this.logger, e);
        }
    }
    async validate(req, res) {
        try {
            await this.tagTypeService.validate(req.body);
            res.status(200).json({ valid: true, tagType: req.body });
        }
        catch (error) {
            util_1.handleErrors(res, this.logger, error);
        }
    }
    async createTagType(req, res) {
        const userName = extract_user_1.default(req);
        try {
            const tagType = await this.tagTypeService.createTagType(req.body, userName);
            res.status(201).json(tagType);
        }
        catch (error) {
            util_1.handleErrors(res, this.logger, error);
        }
    }
    async updateTagType(req, res) {
        const { description, icon } = req.body;
        const { name } = req.params;
        const userName = extract_user_1.default(req);
        try {
            await this.tagTypeService.updateTagType({ name, description, icon }, userName);
            res.status(200).end();
        }
        catch (error) {
            util_1.handleErrors(res, this.logger, error);
        }
    }
    async getTagType(req, res) {
        const { name } = req.params;
        try {
            const tagType = await this.tagTypeService.getTagType(name);
            res.json({ version, tagType });
        }
        catch (error) {
            util_1.handleErrors(res, this.logger, error);
        }
    }
    async deleteTagType(req, res) {
        const { name } = req.params;
        const userName = extract_user_1.default(req);
        try {
            await this.tagTypeService.deleteTagType(name, userName);
            res.status(200).end();
        }
        catch (error) {
            util_1.handleErrors(res, this.logger, error);
        }
    }
}
exports.default = TagTypeController;
module.exports = TagTypeController;
//# sourceMappingURL=tag-type.js.map