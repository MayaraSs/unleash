"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const controller_1 = __importDefault(require("../controller"));
const util_1 = require("./util");
const permissions_1 = require("../../types/permissions");
class MetricsController extends controller_1.default {
    constructor(config, { clientMetricsService, }) {
        super(config);
        this.logger = config.getLogger('/admin-api/metrics.js');
        this.metrics = clientMetricsService;
        this.get('/seen-toggles', this.getSeenToggles);
        this.get('/seen-apps', this.getSeenApps);
        this.get('/feature-toggles', this.getFeatureToggles);
        this.get('/feature-toggles/:name', this.getFeatureToggle);
        this.post('/applications/:appName', this.createApplication, permissions_1.UPDATE_APPLICATION);
        this.delete('/applications/:appName', this.deleteApplication, permissions_1.UPDATE_APPLICATION);
        this.get('/applications/', this.getApplications);
        this.get('/applications/:appName', this.getApplication);
    }
    async getSeenToggles(req, res) {
        try {
            const seenAppToggles = await this.metrics.getAppsWithToggles();
            res.json(seenAppToggles);
        }
        catch (e) {
            util_1.handleErrors(res, this.logger, e);
        }
    }
    async getSeenApps(req, res) {
        try {
            const seenApps = await this.metrics.getSeenApps();
            res.json(seenApps);
        }
        catch (e) {
            util_1.handleErrors(res, this.logger, e);
        }
    }
    async getFeatureToggles(req, res) {
        try {
            const toggles = await this.metrics.getTogglesMetrics();
            res.json(toggles);
        }
        catch (e) {
            util_1.handleErrors(res, this.logger, e);
        }
    }
    async getFeatureToggle(req, res) {
        try {
            const { name } = req.params;
            const data = await this.metrics.getTogglesMetrics();
            const lastHour = data.lastHour[name] || {};
            const lastMinute = data.lastMinute[name] || {};
            res.json({
                lastHour,
                lastMinute,
            });
        }
        catch (e) {
            util_1.handleErrors(res, this.logger, e);
        }
    }
    async deleteApplication(req, res) {
        const { appName } = req.params;
        try {
            await this.metrics.deleteApplication(appName);
            res.status(200).end();
        }
        catch (e) {
            util_1.handleErrors(res, this.logger, e);
        }
    }
    async createApplication(req, res) {
        const input = { ...req.body, appName: req.params.appName };
        try {
            await this.metrics.createApplication(input);
            res.status(202).end();
        }
        catch (err) {
            util_1.handleErrors(res, this.logger, err);
        }
    }
    async getApplications(req, res) {
        try {
            const applications = await this.metrics.getApplications(req.query);
            res.json({ applications });
        }
        catch (err) {
            util_1.handleErrors(res, this.logger, err);
        }
    }
    async getApplication(req, res) {
        const { appName } = req.params;
        try {
            const appDetails = await this.metrics.getApplication(appName);
            res.json(appDetails);
        }
        catch (err) {
            util_1.handleErrors(res, this.logger, err);
        }
    }
}
exports.default = MetricsController;
module.exports = MetricsController;
//# sourceMappingURL=metrics.js.map