'use strict';
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const mime = __importStar(require("mime"));
const js_yaml_1 = __importDefault(require("js-yaml"));
const moment_1 = __importDefault(require("moment"));
const multer_1 = __importDefault(require("multer"));
const controller_1 = __importDefault(require("../controller"));
const permissions_1 = require("../../types/permissions");
const extract_user_1 = __importDefault(require("../../extract-user"));
const util_1 = require("./util");
const upload = multer_1.default({ limits: { fileSize: 5242880 } });
const paramToBool = (param, def) => {
    if (param === null || param === undefined) {
        return def;
    }
    const nu = Number.parseInt(param, 10);
    if (Number.isNaN(nu)) {
        return param.toLowerCase() === 'true';
    }
    return Boolean(nu);
};
class StateController extends controller_1.default {
    constructor(config, { stateService }) {
        super(config);
        this.logger = config.getLogger('/admin-api/state.js');
        this.stateService = stateService;
        this.fileupload('/import', upload.single('file'), this.import, permissions_1.ADMIN);
        this.get('/export', this.export, permissions_1.ADMIN);
    }
    async import(req, res) {
        const userName = extract_user_1.default(req);
        const { drop, keep } = req.query;
        // TODO: Should override request type so file is a type on request
        try {
            let data;
            // @ts-ignore
            if (req.file) {
                // @ts-ignore
                if (mime.getType(req.file.originalname) === 'text/yaml') {
                    // @ts-ignore
                    data = js_yaml_1.default.safeLoad(req.file.buffer);
                }
                else {
                    // @ts-ignore
                    data = JSON.parse(req.file.buffer);
                }
            }
            else {
                data = req.body;
            }
            await this.stateService.import({
                data,
                userName,
                dropBeforeImport: paramToBool(drop, false),
                keepExisting: paramToBool(keep, true),
            });
            res.sendStatus(202);
        }
        catch (err) {
            util_1.handleErrors(res, this.logger, err);
        }
    }
    async export(req, res) {
        const { format } = req.query;
        const downloadFile = paramToBool(req.query.download, false);
        const includeStrategies = paramToBool(req.query.strategies, true);
        const includeFeatureToggles = paramToBool(req.query.featureToggles, true);
        const includeProjects = paramToBool(req.query.projects, true);
        const includeTags = paramToBool(req.query.tags, true);
        try {
            const data = await this.stateService.export({
                includeStrategies,
                includeFeatureToggles,
                includeProjects,
                includeTags,
            });
            const timestamp = moment_1.default().format('YYYY-MM-DD_HH-mm-ss');
            if (format === 'yaml') {
                if (downloadFile) {
                    res.attachment(`export-${timestamp}.yml`);
                }
                res.type('yaml').send(js_yaml_1.default.safeDump(data, { skipInvalid: true }));
            }
            else {
                if (downloadFile) {
                    res.attachment(`export-${timestamp}.json`);
                }
                res.json(data);
            }
        }
        catch (err) {
            util_1.handleErrors(res, this.logger, err);
        }
    }
}
exports.default = StateController;
module.exports = StateController;
//# sourceMappingURL=state.js.map