import { Request, Response } from 'express';
import { IAuthRequest } from '../unleash-types';
import Controller from '../controller';
import { IUnleashConfig } from '../../types/option';
import { IUnleashServices } from '../../types/services';
import User from '../../types/user';
interface IChangeUserRequest {
    password: string;
    confirmPassword: string;
}
export interface IUserRequest<PARAM, QUERY, BODY, RESPONSE> extends Request<PARAM, QUERY, BODY, RESPONSE> {
    user: User;
}
declare class UserController extends Controller {
    private accessService;
    private userService;
    private userFeedbackService;
    private sessionService;
    private logger;
    constructor(config: IUnleashConfig, { accessService, userService, sessionService, userFeedbackService, }: Pick<IUnleashServices, 'accessService' | 'userService' | 'sessionService' | 'userFeedbackService'>);
    getUser(req: IAuthRequest, res: Response): Promise<void>;
    updateUserPass(req: IUserRequest<any, any, IChangeUserRequest, any>, res: Response): Promise<void>;
    mySessions(req: IUserRequest<any, any, any, any>, res: Response): Promise<void>;
}
export default UserController;
