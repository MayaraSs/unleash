'use strict';
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const controller_1 = __importDefault(require("../controller"));
const util_1 = require("./util");
class UserController extends controller_1.default {
    constructor(config, { accessService, userService, sessionService, userFeedbackService, }) {
        super(config);
        this.accessService = accessService;
        this.userService = userService;
        this.sessionService = sessionService;
        this.userFeedbackService = userFeedbackService;
        this.logger = config.getLogger('lib/routes/admin-api/user.ts');
        this.get('/', this.getUser);
        this.post('/change-password', this.updateUserPass);
        this.get('/my-sessions', this.mySessions);
    }
    async getUser(req, res) {
        res.setHeader('cache-control', 'no-store');
        const { user } = req;
        if (user) {
            const permissions = await this.accessService.getPermissionsForUser(user);
            const feedback = await this.userFeedbackService.getAllUserFeedback(user);
            delete user.permissions; // TODO: remove
            return res
                .status(200)
                .json({ user, permissions, feedback })
                .end();
        }
        return res.status(404).end();
    }
    async updateUserPass(req, res) {
        const { user } = req;
        if (user) {
            const { password, confirmPassword } = req.body;
            try {
                if (password === confirmPassword) {
                    this.userService.validatePassword(password);
                    await this.userService.changePassword(user.id, password);
                    res.status(200).end();
                }
                else {
                    res.status(400).end();
                }
            }
            catch (e) {
                util_1.handleErrors(res, this.logger, e);
            }
        }
        else {
            res.status(401).end();
        }
    }
    async mySessions(req, res) {
        const { user } = req;
        if (user) {
            try {
                const sessions = await this.sessionService.getSessionsForUser(user.id);
                res.json(sessions);
            }
            catch (e) {
                util_1.handleErrors(res, this.logger, e);
            }
        }
        else {
            res.status(401).end();
        }
    }
}
module.exports = UserController;
exports.default = UserController;
//# sourceMappingURL=user.js.map