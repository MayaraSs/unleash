"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const controller_1 = __importDefault(require("../controller"));
const permissions_1 = require("../../types/permissions");
const api_token_store_1 = require("../../db/api-token-store");
class ApiTokenController extends controller_1.default {
    constructor(config, services) {
        super(config);
        this.apiTokenService = services.apiTokenService;
        this.accessService = services.accessService;
        this.logger = config.getLogger('api-token-controller.js');
        this.get('/', this.getAllApiTokens);
        this.post('/', this.createApiToken, permissions_1.CREATE_API_TOKEN);
        this.put('/:token', this.updateApiToken, permissions_1.UPDATE_API_TOKEN);
        this.delete('/:token', this.deleteApiToken, permissions_1.DELETE_API_TOKEN);
    }
    async isTokenAdmin(user) {
        if (user.isAPI) {
            return user.permissions.includes(permissions_1.ADMIN);
        }
        return this.accessService.hasPermission(user, permissions_1.UPDATE_API_TOKEN);
    }
    async getAllApiTokens(req, res) {
        const { user } = req;
        const isAdmin = await this.isTokenAdmin(user);
        const tokens = await this.apiTokenService.getAllTokens();
        if (isAdmin) {
            res.json({ tokens });
        }
        else {
            const filteredTokens = tokens.filter(t => !(t.type === api_token_store_1.ApiTokenType.ADMIN));
            res.json({ tokens: filteredTokens });
        }
    }
    async createApiToken(req, res) {
        const { username, type, expiresAt } = req.body;
        if (!username || !type) {
            this.logger.error(req.body);
            return res.status(400).send();
        }
        const tokenType = type.toLowerCase() === 'admin'
            ? api_token_store_1.ApiTokenType.ADMIN
            : api_token_store_1.ApiTokenType.CLIENT;
        try {
            const token = await this.apiTokenService.creteApiToken({
                type: tokenType,
                username,
                expiresAt,
            });
            return res.status(201).json(token);
        }
        catch (error) {
            this.logger.error('error creating api-token', error);
            return res.status(500);
        }
    }
    async deleteApiToken(req, res) {
        const { token } = req.params;
        try {
            await this.apiTokenService.delete(token);
            res.status(200).end();
        }
        catch (error) {
            this.logger.error('error creating api-token', error);
            res.status(500);
        }
    }
    async updateApiToken(req, res) {
        const { token } = req.params;
        const { expiresAt } = req.body;
        if (!expiresAt) {
            this.logger.error(req.body);
            return res.status(400).send();
        }
        try {
            await this.apiTokenService.updateExpiry(token, expiresAt);
            return res.status(200).end();
        }
        catch (error) {
            this.logger.error('error creating api-token', error);
            return res.status(500);
        }
    }
}
module.exports = ApiTokenController;
exports.default = ApiTokenController;
//# sourceMappingURL=api-token-controller.js.map