"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const controller_1 = __importDefault(require("../controller"));
const util_1 = require("./util");
const extract_user_1 = __importDefault(require("../../extract-user"));
const permissions_1 = require("../../types/permissions");
class ContextController extends controller_1.default {
    constructor(config, { contextService }) {
        super(config);
        this.logger = config.getLogger('/admin-api/feature.js');
        this.contextService = contextService;
        this.get('/', this.getContextFields);
        this.post('/', this.createContextField, permissions_1.CREATE_CONTEXT_FIELD);
        this.get('/:contextField', this.getContextField);
        this.put('/:contextField', this.updateContextField, permissions_1.UPDATE_CONTEXT_FIELD);
        this.delete('/:contextField', this.deleteContextField, permissions_1.DELETE_CONTEXT_FIELD);
        this.post('/validate', this.validate);
    }
    async getContextFields(req, res) {
        try {
            const fields = await this.contextService.getAll();
            res.status(200)
                .json(fields)
                .end();
        }
        catch (e) {
            util_1.handleErrors(res, this.logger, e);
        }
    }
    async getContextField(req, res) {
        try {
            const name = req.params.contextField;
            const contextField = await this.contextService.getContextField(name);
            res.json(contextField).end();
        }
        catch (err) {
            res.status(404).json({ error: 'Could not find context field' });
        }
    }
    async createContextField(req, res) {
        const value = req.body;
        const userName = extract_user_1.default(req);
        try {
            await this.contextService.createContextField(value, userName);
            res.status(201).end();
        }
        catch (error) {
            util_1.handleErrors(res, this.logger, error);
        }
    }
    async updateContextField(req, res) {
        const name = req.params.contextField;
        const userName = extract_user_1.default(req);
        const contextField = req.body;
        contextField.name = name;
        try {
            await this.contextService.updateContextField(contextField, userName);
            res.status(200).end();
        }
        catch (error) {
            util_1.handleErrors(res, this.logger, error);
        }
    }
    async deleteContextField(req, res) {
        const name = req.params.contextField;
        const userName = extract_user_1.default(req);
        try {
            await this.contextService.deleteContextField(name, userName);
            res.status(200).end();
        }
        catch (error) {
            util_1.handleErrors(res, this.logger, error);
        }
    }
    async validate(req, res) {
        const { name } = req.body;
        try {
            await this.contextService.validateName(name);
            res.status(200).end();
        }
        catch (error) {
            util_1.handleErrors(res, this.logger, error);
        }
    }
}
exports.default = ContextController;
module.exports = ContextController;
//# sourceMappingURL=context.js.map