'use strict';
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const controller_1 = __importDefault(require("../controller"));
const permissions_1 = require("../../types/permissions");
const util_1 = require("./util");
const extract_user_1 = __importDefault(require("../../extract-user"));
const version = 1;
class TagController extends controller_1.default {
    constructor(config, { tagService }) {
        super(config);
        this.tagService = tagService;
        this.logger = config.getLogger('/admin-api/tag.js');
        this.get('/', this.getTags);
        this.post('/', this.createTag, permissions_1.UPDATE_FEATURE);
        this.get('/:type', this.getTagsByType);
        this.get('/:type/:value', this.getTag);
        this.delete('/:type/:value', this.deleteTag, permissions_1.UPDATE_FEATURE);
    }
    async getTags(req, res) {
        try {
            const tags = await this.tagService.getTags();
            res.json({ version, tags });
        }
        catch (e) {
            util_1.handleErrors(res, this.logger, e);
        }
    }
    async getTagsByType(req, res) {
        try {
            const tags = await this.tagService.getTagsByType(req.params.type);
            res.json({ version, tags });
        }
        catch (e) {
            util_1.handleErrors(res, this.logger, e);
        }
    }
    async getTag(req, res) {
        const { type, value } = req.params;
        try {
            const tag = await this.tagService.getTag({ type, value });
            res.json({ version, tag });
        }
        catch (err) {
            util_1.handleErrors(res, this.logger, err);
        }
    }
    async createTag(req, res) {
        const userName = extract_user_1.default(req);
        try {
            await this.tagService.createTag(req.body, userName);
            res.status(201).end();
        }
        catch (error) {
            util_1.handleErrors(res, this.logger, error);
        }
    }
    async deleteTag(req, res) {
        const { type, value } = req.params;
        const userName = extract_user_1.default(req);
        try {
            await this.tagService.deleteTag({ type, value }, userName);
            res.status(200).end();
        }
        catch (error) {
            util_1.handleErrors(res, this.logger, error);
        }
    }
}
exports.default = TagController;
module.exports = TagController;
//# sourceMappingURL=tag.js.map