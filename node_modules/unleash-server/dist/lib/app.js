"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const unleash_frontend_1 = require("unleash-frontend");
const fs_1 = __importDefault(require("fs"));
const express_1 = __importDefault(require("express"));
const cors_1 = __importDefault(require("cors"));
const compression_1 = __importDefault(require("compression"));
const serve_favicon_1 = __importDefault(require("serve-favicon"));
const cookie_parser_1 = __importDefault(require("cookie-parser"));
const path_1 = __importDefault(require("path"));
const errorhandler_1 = __importDefault(require("errorhandler"));
const response_time_metrics_1 = require("./middleware/response-time-metrics");
const rbac_middleware_1 = __importDefault(require("./middleware/rbac-middleware"));
const api_token_middleware_1 = __importDefault(require("./middleware/api-token-middleware"));
const option_1 = require("./types/option");
const session_db_1 = __importDefault(require("./middleware/session-db"));
const routes_1 = __importDefault(require("./routes"));
const request_logger_1 = __importDefault(require("./middleware/request-logger"));
const demo_authentication_1 = __importDefault(require("./middleware/demo-authentication"));
const oss_authentication_1 = __importDefault(require("./middleware/oss-authentication"));
const no_authentication_1 = __importDefault(require("./middleware/no-authentication"));
const secure_headers_1 = __importDefault(require("./middleware/secure-headers"));
const rewriteHTML_1 = require("./util/rewriteHTML");
function getApp(config, stores, services, eventBus) {
    const app = express_1.default();
    const baseUriPath = config.server.baseUriPath || '';
    let indexHTML = fs_1.default
        .readFileSync(path_1.default.join(unleash_frontend_1.publicFolder, 'index.html'))
        .toString();
    indexHTML = rewriteHTML_1.rewriteHTML(indexHTML, baseUriPath);
    app.set('trust proxy', true);
    app.disable('x-powered-by');
    app.set('port', config.server.port);
    app.locals.baseUriPath = baseUriPath;
    if (config.server.serverMetrics && eventBus) {
        app.use(response_time_metrics_1.responseTimeMetrics(eventBus));
    }
    app.use(request_logger_1.default(config));
    if (typeof config.preHook === 'function') {
        config.preHook(app, config, services);
    }
    if (process.env.NODE_ENV === 'development') {
        app.use(cors_1.default());
    }
    app.use(compression_1.default());
    app.use(cookie_parser_1.default());
    app.use(express_1.default.json({ strict: false }));
    app.use(session_db_1.default(config, stores));
    app.use(secure_headers_1.default(config));
    app.use(express_1.default.urlencoded({ extended: true }));
    app.use(serve_favicon_1.default(path_1.default.join(unleash_frontend_1.publicFolder, 'favicon.ico')));
    app.use(baseUriPath, express_1.default.static(unleash_frontend_1.publicFolder, { index: false }));
    if (config.enableOAS) {
        app.use(`${baseUriPath}/oas`, express_1.default.static('docs/api/oas'));
    }
    switch (config.authentication.type) {
        case option_1.IAuthType.OPEN_SOURCE: {
            app.use(baseUriPath, api_token_middleware_1.default(config, services));
            oss_authentication_1.default(app, config);
            break;
        }
        case option_1.IAuthType.ENTERPRISE: {
            app.use(baseUriPath, api_token_middleware_1.default(config, services));
            config.authentication.customAuthHandler(app, config, services);
            break;
        }
        case option_1.IAuthType.HOSTED: {
            app.use(baseUriPath, api_token_middleware_1.default(config, services));
            config.authentication.customAuthHandler(app, config, services);
            break;
        }
        case option_1.IAuthType.DEMO: {
            app.use(baseUriPath, api_token_middleware_1.default(config, services));
            demo_authentication_1.default(app, config.server.baseUriPath, services);
            break;
        }
        case option_1.IAuthType.CUSTOM: {
            app.use(baseUriPath, api_token_middleware_1.default(config, services));
            config.authentication.customAuthHandler(app, config, services);
            break;
        }
        case option_1.IAuthType.NONE: {
            no_authentication_1.default(baseUriPath, app);
            break;
        }
        default: {
            demo_authentication_1.default(app, config.server.baseUriPath, services);
            break;
        }
    }
    app.use(baseUriPath, rbac_middleware_1.default(config, stores, services.accessService));
    if (typeof config.preRouterHook === 'function') {
        config.preRouterHook(app, config, services, stores);
    }
    // Setup API routes
    app.use(`${baseUriPath}/`, new routes_1.default(config, services).router);
    if (process.env.NODE_ENV !== 'production') {
        app.use(errorhandler_1.default());
    }
    app.get(`${baseUriPath}`, (req, res) => {
        res.send(indexHTML);
    });
    app.get(`${baseUriPath}/*`, (req, res) => {
        if (req.path.startsWith(`${baseUriPath}/api`)) {
            res.status(404).send({ message: '404 - Not found' });
            return;
        }
        res.send(indexHTML);
    });
    return app;
}
exports.default = getApp;
module.exports = getApp;
//# sourceMappingURL=app.js.map