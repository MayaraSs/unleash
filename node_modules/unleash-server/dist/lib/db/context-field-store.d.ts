import { Knex } from 'knex';
import { LogProvider } from '../logger';
export interface ICreateContextField {
    name: string;
    description: string;
    stickiness: boolean;
    sort_order: number;
    legal_values?: string[];
    updated_at: Date;
}
export interface IContextField {
    name: string;
    description: string;
    stickiness: boolean;
    sortOrder: number;
    legalValues?: string[];
    createdAt: Date;
}
declare class ContextFieldStore {
    private db;
    private logger;
    constructor(db: Knex, getLogger: LogProvider);
    fieldToRow(data: any): ICreateContextField;
    getAll(): Promise<IContextField[]>;
    get(name: string): Promise<IContextField>;
    create(contextField: any): Promise<void>;
    update(data: any): Promise<void>;
    delete(name: string): Promise<void>;
}
export default ContextFieldStore;
