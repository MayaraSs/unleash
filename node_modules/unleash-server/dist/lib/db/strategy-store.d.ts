import { Knex } from 'knex';
import { LogProvider } from '../logger';
export interface IStrategy {
    name: string;
    editable: boolean;
    description: string;
    parameters: object;
    deprecated: boolean;
    displayName: string;
}
export interface IEditableStrategy {
    name: string;
    description: string;
    parameters: object;
    deprecated: boolean;
}
export interface IMinimalStrategy {
    name: string;
    description: string;
    parameters: string;
}
interface IStrategyRow {
    name: string;
    built_in: number;
    description: string;
    parameters: object;
    deprecated: boolean;
    display_name: string;
}
export default class StrategyStore {
    private db;
    private logger;
    constructor(db: Knex, getLogger: LogProvider);
    getStrategies(): Promise<IStrategy[]>;
    getEditableStrategies(): Promise<IEditableStrategy[]>;
    getStrategy(name: string): Promise<IStrategy>;
    rowToStrategy(row: IStrategyRow): IStrategy;
    rowToEditableStrategy(row: IStrategyRow): IEditableStrategy;
    eventDataToRow(data: any): IMinimalStrategy;
    createStrategy(data: any): Promise<void>;
    updateStrategy(data: any): Promise<void>;
    deprecateStrategy({ name }: Pick<IStrategy, 'name'>): Promise<void>;
    reactivateStrategy({ name }: Pick<IStrategy, 'name'>): Promise<void>;
    deleteStrategy({ name }: Pick<IStrategy, 'name'>): Promise<void>;
    importStrategy(data: any): Promise<void>;
    dropStrategies(): Promise<void>;
}
export {};
