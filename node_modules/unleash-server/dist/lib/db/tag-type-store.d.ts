/// <reference types="node" />
import { Knex } from 'knex';
import { EventEmitter } from 'events';
import { LogProvider } from '../logger';
interface ITagTypeTable {
    name: string;
    description?: string;
    icon?: string;
}
export interface ITagType {
    name: string;
    description?: string;
    icon?: string;
}
export default class TagTypeStore {
    private db;
    private logger;
    private readonly timer;
    constructor(db: Knex, eventBus: EventEmitter, getLogger: LogProvider);
    getAll(): Promise<ITagType[]>;
    getTagType(name: string): Promise<ITagType>;
    exists(name: string): Promise<Boolean>;
    createTagType(newTagType: ITagType): Promise<void>;
    deleteTagType(name: string): Promise<void>;
    dropTagTypes(): Promise<void>;
    bulkImport(tagTypes: ITagType[]): Promise<ITagType[]>;
    updateTagType({ name, description, icon }: ITagType): Promise<void>;
    rowToTagType(row: ITagTypeTable): ITagType;
}
export {};
