'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const COLUMNS = ['given', 'user_id', 'feedback_id', 'nevershow'];
const TABLE = 'user_feedback';
const fieldToRow = (fields) => {
    return {
        nevershow: fields.neverShow,
        feedback_id: fields.feedbackId,
        given: fields.given,
        user_id: fields.userId,
    };
};
const rowToField = (row) => {
    return {
        neverShow: row.nevershow,
        feedbackId: row.feedback_id,
        given: row.given,
        userId: row.user_id,
    };
};
class UserFeedbackStore {
    constructor(db, eventBus, getLogger) {
        this.db = db;
        this.logger = getLogger('user-feedback-store.js');
    }
    async getAllUserFeedback(userId) {
        const userFeedback = await this.db
            .table(TABLE)
            .select()
            .where({ user_id: userId });
        return userFeedback.map(rowToField);
    }
    async getFeedback(userId, feedbackId) {
        const userFeedback = await this.db
            .table(TABLE)
            .select()
            .where({ user_id: userId, feedback_id: feedbackId })
            .first();
        return rowToField(userFeedback);
    }
    async updateFeedback(feedback) {
        const insertedFeedback = await this.db
            .table(TABLE)
            .insert(fieldToRow(feedback))
            .onConflict(['user_id', 'feedback_id'])
            .merge()
            .returning(COLUMNS);
        return rowToField(insertedFeedback[0]);
    }
}
exports.default = UserFeedbackStore;
module.exports = UserFeedbackStore;
//# sourceMappingURL=user-feedback-store.js.map