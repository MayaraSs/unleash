"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccessStore = void 0;
const metrics_helper_1 = __importDefault(require("../util/metrics-helper"));
const metric_events_1 = require("../metric-events");
const T = {
    ROLE_USER: 'role_user',
    ROLES: 'roles',
    ROLE_PERMISSION: 'role_permission',
};
class AccessStore {
    constructor(db, eventBus, getLogger) {
        this.db = db;
        this.logger = getLogger('access-store.js');
        this.timer = (action) => metrics_helper_1.default.wrapTimer(eventBus, metric_events_1.DB_TIME, {
            store: 'access-store',
            action,
        });
    }
    async getPermissionsForUser(userId) {
        const stopTimer = this.timer('getPermissionsForUser');
        const rows = await this.db
            .select('project', 'permission')
            .from(`${T.ROLE_PERMISSION} AS rp`)
            .leftJoin(`${T.ROLE_USER} AS ur`, 'ur.role_id', 'rp.role_id')
            .where('ur.user_id', '=', userId);
        stopTimer();
        return rows;
    }
    async getPermissionsForRole(roleId) {
        const stopTimer = this.timer('getPermissionsForRole');
        const rows = await this.db
            .select('project', 'permission')
            .from(`${T.ROLE_PERMISSION}`)
            .where('role_id', '=', roleId);
        stopTimer();
        return rows;
    }
    async getRoles() {
        return this.db
            .select(['id', 'name', 'type', 'description'])
            .from(T.ROLES);
    }
    async getRoleWithId(id) {
        return this.db
            .select(['id', 'name', 'type', 'description'])
            .where('id', id)
            .first()
            .from(T.ROLES);
    }
    async getRolesForProject(projectId) {
        return this.db
            .select(['id', 'name', 'type', 'project', 'description'])
            .from(T.ROLES)
            .where('project', projectId)
            .andWhere('type', 'project');
    }
    async getRootRoles() {
        return this.db
            .select(['id', 'name', 'type', 'project', 'description'])
            .from(T.ROLES)
            .andWhere('type', 'root');
    }
    async removeRolesForProject(projectId) {
        return this.db(T.ROLES)
            .where({
            project: projectId,
        })
            .delete();
    }
    async getRolesForUserId(userId) {
        return this.db
            .select(['id', 'name', 'type', 'project', 'description'])
            .from(T.ROLES)
            .innerJoin(`${T.ROLE_USER} as ru`, 'ru.role_id', 'id')
            .where('ru.user_id', '=', userId);
    }
    async getUserIdsForRole(roleId) {
        const rows = await this.db
            .select(['user_id'])
            .from(T.ROLE_USER)
            .where('role_id', roleId);
        return rows.map(r => r.user_id);
    }
    async addUserToRole(userId, roleId) {
        return this.db(T.ROLE_USER).insert({
            user_id: userId,
            role_id: roleId,
        });
    }
    async removeUserFromRole(userId, roleId) {
        return this.db(T.ROLE_USER)
            .where({
            user_id: userId,
            role_id: roleId,
        })
            .delete();
    }
    async removeRolesOfTypeForUser(userId, roleType) {
        const rolesToRemove = this.db(T.ROLES)
            .select('id')
            .where({ type: roleType });
        return this.db(T.ROLE_USER)
            .where({ user_id: userId })
            .whereIn('role_id', rolesToRemove)
            .delete();
    }
    async createRole(name, type, project, description) {
        const [id] = await this.db(T.ROLES)
            .insert({ name, description, type, project })
            .returning('id');
        return { id, name, description, type, project };
    }
    async addPermissionsToRole(role_id, permissions, projectId) {
        const rows = permissions.map(permission => ({
            role_id,
            project: projectId,
            permission,
        }));
        return this.db.batchInsert(T.ROLE_PERMISSION, rows);
    }
    async removePermissionFromRole(roleId, permission, projectId) {
        return this.db(T.ROLE_PERMISSION)
            .where({
            role_id: roleId,
            permission,
            project: projectId,
        })
            .delete();
    }
    async getRootRoleForAllUsers() {
        const rows = await this.db
            .select('id', 'user_id')
            .distinctOn('user_id')
            .from(`${T.ROLES} AS r`)
            .leftJoin(`${T.ROLE_USER} AS ru`, 'r.id', 'ru.role_id')
            .where('r.type', '=', 'root');
        return rows.map(row => ({
            roleId: +row.id,
            userId: +row.user_id,
        }));
    }
}
exports.AccessStore = AccessStore;
//# sourceMappingURL=access-store.js.map