/// <reference types="node" />
import { EventEmitter } from 'events';
import { Knex } from 'knex';
import { LogProvider } from '../logger';
interface IEventTable {
    id: number;
    type: string;
    created_by: string;
    created_at: Date;
    data: any;
    tags: [];
}
interface ICreateEvent {
    type: string;
    createdBy: string;
    data?: any;
    tags?: Array<string>;
}
export interface IEvent extends ICreateEvent {
    id: number;
    createdAt: Date;
}
declare class EventStore extends EventEmitter {
    private db;
    private logger;
    constructor(db: Knex, getLogger: LogProvider);
    store(event: ICreateEvent): Promise<void>;
    batchStore(events: ICreateEvent[]): Promise<void>;
    getEvents(): Promise<IEvent[]>;
    getEventsFilterByName(name: string): Promise<IEvent[]>;
    rowToEvent(row: IEventTable): IEvent;
    eventToDbRow(e: ICreateEvent): any;
}
export default EventStore;
