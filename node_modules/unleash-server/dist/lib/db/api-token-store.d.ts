/// <reference types="node" />
import { EventEmitter } from 'events';
import { Knex } from 'knex';
import { LogProvider } from '../logger';
export declare enum ApiTokenType {
    CLIENT = "client",
    ADMIN = "admin"
}
export interface IApiTokenCreate {
    secret: string;
    username: string;
    type: ApiTokenType;
    expiresAt?: Date;
}
export interface IApiToken extends IApiTokenCreate {
    createdAt: Date;
    seenAt?: Date;
}
export declare class ApiTokenStore {
    private logger;
    private timer;
    private db;
    constructor(db: Knex, eventBus: EventEmitter, getLogger: LogProvider);
    getAll(): Promise<IApiToken[]>;
    getAllActive(): Promise<IApiToken[]>;
    insert(newToken: IApiTokenCreate): Promise<IApiToken>;
    delete(secret: string): Promise<void>;
    deleteAll(): Promise<void>;
    setExpiry(secret: string, expiresAt: Date): Promise<IApiToken>;
    markSeenAt(secrets: string[]): Promise<void>;
}
