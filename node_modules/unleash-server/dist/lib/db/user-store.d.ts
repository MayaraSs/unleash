import { Knex } from 'knex';
import { LogProvider } from '../logger';
import User from '../types/user';
interface ICreateUser {
    name?: string;
    username?: string;
    email?: string;
    imageUrl?: string;
}
export interface IUserLookup {
    id?: number;
    username?: string;
    email?: string;
}
export interface IUserSearch {
    name?: string;
    username?: string;
    email: string;
}
export interface IUserUpdateFields {
    name?: string;
    email?: string;
}
declare class UserStore {
    private db;
    private logger;
    constructor(db: Knex, getLogger: LogProvider);
    update(id: number, fields: IUserUpdateFields): Promise<User>;
    insert(user: ICreateUser): Promise<User>;
    upsert(user: ICreateUser): Promise<User>;
    buildSelectUser(q: IUserLookup): any;
    hasUser(idQuery: IUserLookup): Promise<number | undefined>;
    getAll(): Promise<User[]>;
    search(query: IUserSearch): Promise<User[]>;
    getAllWithId(userIdList: number[]): Promise<User[]>;
    get(idQuery: IUserLookup): Promise<User>;
    delete(id: number): Promise<void>;
    getPasswordHash(userId: number): Promise<string>;
    setPasswordHash(userId: number, passwordHash: string): Promise<void>;
    incLoginAttempts(user: User): Promise<void>;
    successfullyLogin(user: User): Promise<void>;
    deleteAll(): Promise<void>;
}
export default UserStore;
