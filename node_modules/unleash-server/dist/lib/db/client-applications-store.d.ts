export = ClientApplicationsDb;
declare class ClientApplicationsDb {
    constructor(db: any, eventBus: any);
    db: any;
    eventBus: any;
    upsert(details: any): Promise<any>;
    bulkUpsert(apps: any): Promise<any>;
    exists({ appName }: {
        appName: any;
    }): Promise<any>;
    getAll(): Promise<any>;
    getApplication(appName: any): Promise<{
        appName: any;
        createdAt: any;
        updatedAt: any;
        description: any;
        strategies: any;
        createdBy: any;
        url: any;
        color: any;
        icon: any;
    }>;
    deleteApplication(appName: any): Promise<any>;
    /**
     * Could also be done in SQL:
     * (not sure if it is faster though)
     *
     * SELECT app_name from (
     *   SELECT app_name, json_array_elements(strategies)::text as strategyName from client_strategies
     *   ) as foo
     * WHERE foo.strategyName = '"other"';
     */
    getAppsForStrategy(strategyName: any): Promise<any>;
    getApplications(filter: any): Promise<any>;
    getUnannounced(): Promise<any>;
    /** *
     * Updates all rows that have announced = false to announced =true and returns the rows altered
     * @return {[app]} - Apps that hadn't been announced
     */
    setUnannouncedToAnnounced(): [any];
}
