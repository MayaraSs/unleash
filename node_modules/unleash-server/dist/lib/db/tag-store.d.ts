/// <reference types="node" />
import { Knex } from 'knex';
import { EventEmitter } from 'events';
import { LogProvider } from '../logger';
interface ITagTable {
    type: string;
    value: string;
}
export interface ITag {
    type: string;
    value: string;
}
export default class TagStore {
    private db;
    private logger;
    private readonly timer;
    constructor(db: Knex, eventBus: EventEmitter, getLogger: LogProvider);
    getTagsByType(type: string): Promise<ITag[]>;
    getAll(): Promise<ITag[]>;
    getTag(type: string, value: string): Promise<ITag>;
    exists(tag: ITag): Promise<boolean>;
    createTag(tag: ITag): Promise<void>;
    deleteTag(tag: ITag): Promise<void>;
    dropTags(): Promise<void>;
    bulkImport(tags: ITag[]): Promise<ITag[]>;
    rowToTag(row: ITagTable): ITag;
}
export {};
