"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiTokenStore = exports.ApiTokenType = void 0;
const metrics_helper_1 = __importDefault(require("../util/metrics-helper"));
const metric_events_1 = require("../metric-events");
const notfound_error_1 = __importDefault(require("../error/notfound-error"));
const TABLE = 'api_tokens';
var ApiTokenType;
(function (ApiTokenType) {
    ApiTokenType["CLIENT"] = "client";
    ApiTokenType["ADMIN"] = "admin";
})(ApiTokenType = exports.ApiTokenType || (exports.ApiTokenType = {}));
const toRow = (newToken) => ({
    username: newToken.username,
    secret: newToken.secret,
    type: newToken.type,
    expires_at: newToken.expiresAt,
});
const toToken = (row) => ({
    secret: row.secret,
    username: row.username,
    type: row.type,
    expiresAt: row.expires_at,
    createdAt: row.created_at,
});
class ApiTokenStore {
    constructor(db, eventBus, getLogger) {
        this.db = db;
        this.logger = getLogger('api-tokens.js');
        this.timer = (action) => metrics_helper_1.default.wrapTimer(eventBus, metric_events_1.DB_TIME, {
            store: 'api-tokens',
            action,
        });
    }
    async getAll() {
        const stopTimer = this.timer('getAll');
        const rows = await this.db(TABLE);
        stopTimer();
        return rows.map(toToken);
    }
    async getAllActive() {
        const stopTimer = this.timer('getAllActive');
        const rows = await this.db(TABLE)
            .where('expires_at', '>', new Date())
            .orWhere('expires_at', 'IS', null);
        stopTimer();
        return rows.map(toToken);
    }
    async insert(newToken) {
        const [row] = await this.db(TABLE).insert(toRow(newToken), ['created_at']);
        return { ...newToken, createdAt: row.created_at };
    }
    async delete(secret) {
        return this.db(TABLE)
            .where({ secret })
            .del();
    }
    async deleteAll() {
        return this.db(TABLE).del();
    }
    async setExpiry(secret, expiresAt) {
        const rows = await this.db(TABLE)
            .update({ expires_at: expiresAt })
            .where({ secret })
            .returning('*');
        if (rows.length > 0) {
            return toToken(rows[0]);
        }
        throw new notfound_error_1.default('Could not find api-token.');
    }
    async markSeenAt(secrets) {
        const now = new Date();
        try {
            await this.db(TABLE)
                .whereIn('secrets', secrets)
                .update({ seen_at: now });
        }
        catch (err) {
            this.logger.error('Could not update lastSeen, error: ', err);
        }
    }
}
exports.ApiTokenStore = ApiTokenStore;
//# sourceMappingURL=api-token-store.js.map