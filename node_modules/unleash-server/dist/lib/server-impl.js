"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = __importDefault(require("events"));
const stoppable_1 = __importDefault(require("stoppable"));
const util_1 = require("util");
const version_1 = __importDefault(require("./util/version"));
const migrator_1 = __importDefault(require("../migrator"));
const app_1 = __importDefault(require("./app"));
const metrics_1 = require("./metrics");
const db_1 = require("./db");
const services_1 = require("./services");
const create_config_1 = require("./create-config");
const user_1 = __importDefault(require("./types/user"));
const permissions = __importStar(require("./types/permissions"));
const authentication_required_1 = __importDefault(require("./types/authentication-required"));
const eventType = __importStar(require("./types/events"));
const event_hook_1 = require("./event-hook");
const graceful_shutdown_1 = __importDefault(require("./util/graceful-shutdown"));
async function createApp(config, startApp) {
    // Database dependencies (stateful)
    const logger = config.getLogger('server-impl.js');
    const serverVersion = version_1.default;
    const eventBus = new events_1.default();
    const stores = db_1.createStores(config, eventBus);
    const services = services_1.createServices(stores, config);
    const metricsMonitor = metrics_1.createMetricsMonitor();
    const stopUnleash = async (server) => {
        logger.info('Shutting down Unleash...');
        if (server) {
            const stopServer = util_1.promisify(server.stop);
            await stopServer();
        }
        metricsMonitor.stopMonitoring();
        stores.clientInstanceStore.destroy();
        stores.clientMetricsStore.destroy();
        await stores.db.destroy();
    };
    if (!config.server.secret) {
        const secret = await stores.settingStore.get('unleash.secret');
        // eslint-disable-next-line no-param-reassign
        config.server.secret = secret;
    }
    const app = app_1.default(config, stores, services, eventBus);
    if (typeof config.eventHook === 'function') {
        event_hook_1.addEventHook(config.eventHook, stores.eventStore);
    }
    metricsMonitor.startMonitoring(config, stores, serverVersion, eventBus);
    const unleash = {
        stores,
        eventBus,
        services,
        app,
        config,
        version: serverVersion,
    };
    if (config.import.file) {
        await services.stateService.importFile({
            file: config.import.file,
            dropBeforeImport: config.import.dropBeforeImport,
            userName: 'import',
            keepExisting: config.import.keepExisting,
        });
    }
    return new Promise((resolve, reject) => {
        if (startApp) {
            const server = stoppable_1.default(app.listen(config.listen, () => logger.info('Unleash has started.', server.address())), config.server.gracefulShutdownTimeout);
            server.keepAliveTimeout = config.server.keepAliveTimeout;
            server.headersTimeout = config.server.headersTimeout;
            server.on('listening', () => {
                resolve({
                    ...unleash,
                    server,
                    stop: () => stopUnleash(server),
                });
            });
            server.on('error', reject);
        }
        else {
            resolve({ ...unleash, stop: stopUnleash });
        }
    });
}
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
async function start(opts = {}) {
    const config = create_config_1.createConfig(opts);
    const logger = config.getLogger('server-impl.js');
    try {
        if (config.db.disableMigration) {
            logger.info('DB migrations disabled');
        }
        else {
            await migrator_1.default(config);
        }
    }
    catch (err) {
        logger.error('Failed to migrate db', err);
        throw err;
    }
    const unleash = await createApp(config, true);
    if (config.server.gracefulShutdownEnable) {
        graceful_shutdown_1.default(unleash, logger);
    }
    return unleash;
}
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
async function create(opts) {
    const config = create_config_1.createConfig(opts);
    const logger = config.getLogger('server-impl.js');
    try {
        if (config.db.disableMigration) {
            logger.info('DB migrations disabled');
        }
        else {
            await migrator_1.default(config);
        }
    }
    catch (err) {
        logger.error('Failed to migrate db', err);
        throw err;
    }
    return createApp(config, false);
}
const serverImpl = {
    start,
    create,
    User: user_1.default,
    AuthenticationRequired: authentication_required_1.default,
    permissions,
    eventType,
};
exports.default = serverImpl;
module.exports = serverImpl;
//# sourceMappingURL=server-impl.js.map