/// <reference types="node" />
import { URL } from 'url';
import { IUserSearch } from '../db/user-store';
import User, { IUser } from '../types/user';
import { RoleName } from './access-service';
import { IUnleashConfig } from '../types/option';
import { IUnleashServices } from '../types/services';
import { IUnleashStores } from '../types/stores';
export interface ICreateUser {
    name?: string;
    email?: string;
    username?: string;
    password?: string;
    rootRole: number | RoleName;
}
export interface IUpdateUser {
    id: number;
    name?: string;
    email?: string;
    rootRole?: number | RoleName;
}
interface IUserWithRole extends IUser {
    rootRole: number;
}
interface IRoleDescription {
    description: string;
    name: string;
    type: string;
}
interface ITokenUser extends IUpdateUser {
    createdBy: string;
    token: string;
    role: IRoleDescription;
}
declare class UserService {
    private logger;
    private store;
    private eventStore;
    private accessService;
    private resetTokenService;
    private sessionService;
    private emailService;
    constructor(stores: Pick<IUnleashStores, 'userStore' | 'eventStore'>, { getLogger, authentication, }: Pick<IUnleashConfig, 'getLogger' | 'authentication'>, { accessService, resetTokenService, emailService, sessionService, }: Pick<IUnleashServices, 'accessService' | 'resetTokenService' | 'emailService' | 'sessionService'>);
    validatePassword(password: string): boolean;
    initAdminUser(): Promise<void>;
    getAll(): Promise<IUserWithRole[]>;
    getUser(id: number): Promise<IUserWithRole>;
    search(query: IUserSearch): Promise<User[]>;
    getByEmail(email: string): Promise<User>;
    createUser({ username, email, name, password, rootRole }: ICreateUser, updatedBy?: User): Promise<User>;
    private updateChangeLog;
    updateUser({ id, name, email, rootRole }: IUpdateUser, updatedBy?: User): Promise<User>;
    loginUser(usernameOrEmail: string, password: string): Promise<User>;
    /**
     * Used to login users without specifying password. Used when integrating
     * with external identity providers.
     *
     * @param usernameOrEmail
     * @param autoCreateUser
     * @returns
     */
    loginUserWithoutPassword(email: string, autoCreateUser?: boolean): Promise<User>;
    changePassword(userId: number, password: string): Promise<void>;
    deleteUser(userId: number, updatedBy?: User): Promise<void>;
    getUserForToken(token: string): Promise<ITokenUser>;
    /**
     * If the password is a strong password will update password and delete all sessions for the user we're changing the password for
     * @param token - the token authenticating this request
     * @param password - new password
     */
    resetPassword(token: string, password: string): Promise<void>;
    createResetPasswordEmail(receiverEmail: string, user?: User): Promise<URL>;
}
export default UserService;
