"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const bcrypt_1 = __importDefault(require("bcrypt"));
const owasp_password_strength_test_1 = __importDefault(require("owasp-password-strength-test"));
const joi_1 = __importDefault(require("joi"));
const user_1 = __importDefault(require("../types/user"));
const is_email_1 = __importDefault(require("../util/is-email"));
const access_service_1 = require("./access-service");
const invalid_token_error_1 = __importDefault(require("../error/invalid-token-error"));
const notfound_error_1 = __importDefault(require("../error/notfound-error"));
const owasp_validation_error_1 = __importDefault(require("../error/owasp-validation-error"));
const password_undefined_1 = __importDefault(require("../error/password-undefined"));
const events_1 = require("../types/events");
const systemUser = new user_1.default({ id: -1, username: 'system' });
const saltRounds = 10;
class UserService {
    constructor(stores, { getLogger, authentication, }, { accessService, resetTokenService, emailService, sessionService, }) {
        this.logger = getLogger('service/user-service.js');
        this.store = stores.userStore;
        this.eventStore = stores.eventStore;
        this.accessService = accessService;
        this.resetTokenService = resetTokenService;
        this.emailService = emailService;
        this.sessionService = sessionService;
        if (authentication && authentication.createAdminUser) {
            process.nextTick(() => this.initAdminUser());
        }
    }
    validatePassword(password) {
        if (password) {
            const result = owasp_password_strength_test_1.default.test(password);
            if (!result.strong) {
                throw new owasp_validation_error_1.default(result);
            }
            else
                return true;
        }
        else {
            throw new password_undefined_1.default();
        }
    }
    async initAdminUser() {
        const hasAdminUser = await this.store.hasUser({ username: 'admin' });
        if (!hasAdminUser) {
            // create default admin user
            try {
                const pwd = 'unleash4all';
                this.logger.info(`Creating default user "admin" with password "${pwd}"`);
                const user = await this.store.insert({
                    username: 'admin',
                });
                const passwordHash = await bcrypt_1.default.hash(pwd, saltRounds);
                await this.store.setPasswordHash(user.id, passwordHash);
                await this.accessService.setUserRootRole(user.id, access_service_1.RoleName.ADMIN);
            }
            catch (e) {
                this.logger.error('Unable to create default user "admin"');
            }
        }
    }
    async getAll() {
        const users = await this.store.getAll();
        const defaultRole = await this.accessService.getRootRole(access_service_1.RoleName.VIEWER);
        const userRoles = await this.accessService.getRootRoleForAllUsers();
        const usersWithRootRole = users.map(u => {
            const rootRole = userRoles.find(r => r.userId === u.id);
            const roleId = rootRole ? rootRole.roleId : defaultRole.id;
            return { ...u, rootRole: roleId };
        });
        return usersWithRootRole;
    }
    async getUser(id) {
        const roles = await this.accessService.getUserRootRoles(id);
        const defaultRole = await this.accessService.getRootRole(access_service_1.RoleName.VIEWER);
        const roleId = roles.length > 0 ? roles[0].id : defaultRole.id;
        const user = await this.store.get({ id });
        return { ...user, rootRole: roleId };
    }
    async search(query) {
        return this.store.search(query);
    }
    async getByEmail(email) {
        return this.store.get({ email });
    }
    async createUser({ username, email, name, password, rootRole }, updatedBy) {
        assert_1.default.ok(username || email, 'You must specify username or email');
        if (email) {
            joi_1.default.assert(email, joi_1.default.string().email(), 'Email');
        }
        const exists = await this.store.hasUser({ username, email });
        if (exists) {
            throw new Error('User already exists');
        }
        const user = await this.store.insert({
            username,
            email,
            name,
        });
        await this.accessService.setUserRootRole(user.id, rootRole);
        if (password) {
            const passwordHash = await bcrypt_1.default.hash(password, saltRounds);
            await this.store.setPasswordHash(user.id, passwordHash);
        }
        await this.updateChangeLog(events_1.USER_CREATED, user, updatedBy);
        return user;
    }
    async updateChangeLog(type, user, updatedBy = systemUser) {
        await this.eventStore.store({
            type,
            createdBy: updatedBy.username || updatedBy.email,
            data: {
                id: user.id,
                name: user.name,
                username: user.username,
                email: user.email,
            },
        });
    }
    async updateUser({ id, name, email, rootRole }, updatedBy) {
        if (email) {
            joi_1.default.assert(email, joi_1.default.string().email(), 'Email');
        }
        if (rootRole) {
            await this.accessService.setUserRootRole(id, rootRole);
        }
        const user = await this.store.update(id, { name, email });
        await this.updateChangeLog(events_1.USER_UPDATED, user, updatedBy);
        return user;
    }
    async loginUser(usernameOrEmail, password) {
        const idQuery = is_email_1.default(usernameOrEmail)
            ? { email: usernameOrEmail }
            : { username: usernameOrEmail };
        const user = await this.store.get(idQuery);
        const passwordHash = await this.store.getPasswordHash(user.id);
        const match = await bcrypt_1.default.compare(password, passwordHash);
        if (match) {
            await this.store.successfullyLogin(user);
            return user;
        }
        throw new Error('Wrong password, try again.');
    }
    /**
     * Used to login users without specifying password. Used when integrating
     * with external identity providers.
     *
     * @param usernameOrEmail
     * @param autoCreateUser
     * @returns
     */
    async loginUserWithoutPassword(email, autoCreateUser = false) {
        let user;
        try {
            user = await this.store.get({ email });
        }
        catch (e) {
            if (autoCreateUser) {
                const defaultRole = await this.accessService.getRootRole(access_service_1.RoleName.EDITOR);
                user = await this.createUser({
                    email,
                    rootRole: defaultRole.id,
                });
            }
            else {
                throw e;
            }
        }
        this.store.successfullyLogin(user);
        return user;
    }
    async changePassword(userId, password) {
        this.validatePassword(password);
        const passwordHash = await bcrypt_1.default.hash(password, saltRounds);
        return this.store.setPasswordHash(userId, passwordHash);
    }
    async deleteUser(userId, updatedBy) {
        const user = await this.store.get({ id: userId });
        const roles = await this.accessService.getRolesForUser(userId);
        await Promise.all(roles.map(role => this.accessService.removeUserFromRole(userId, role.id)));
        await this.sessionService.deleteSessionsForUser(userId);
        await this.store.delete(userId);
        await this.updateChangeLog(events_1.USER_DELETED, user, updatedBy);
    }
    async getUserForToken(token) {
        const { createdBy, userId } = await this.resetTokenService.isValid(token);
        const user = await this.getUser(userId);
        const role = await this.accessService.getRole(user.rootRole);
        return {
            token,
            createdBy,
            email: user.email,
            name: user.name,
            id: user.id,
            role: {
                description: role.role.description,
                type: role.role.type,
                name: role.role.name,
            },
        };
    }
    /**
     * If the password is a strong password will update password and delete all sessions for the user we're changing the password for
     * @param token - the token authenticating this request
     * @param password - new password
     */
    async resetPassword(token, password) {
        this.validatePassword(password);
        const user = await this.getUserForToken(token);
        const allowed = await this.resetTokenService.useAccessToken({
            userId: user.id,
            token,
        });
        if (allowed) {
            await this.changePassword(user.id, password);
            await this.sessionService.deleteSessionsForUser(user.id);
        }
        else {
            throw new invalid_token_error_1.default();
        }
    }
    async createResetPasswordEmail(receiverEmail, user = systemUser) {
        const receiver = await this.getByEmail(receiverEmail);
        if (!receiver) {
            throw new notfound_error_1.default(`Could not find ${receiverEmail}`);
        }
        const resetLink = await this.resetTokenService.createResetPasswordUrl(receiver.id, user.username || user.email);
        await this.emailService.sendResetMail(receiver.name, receiver.email, resetLink.toString());
        return resetLink;
    }
}
module.exports = UserService;
exports.default = UserService;
//# sourceMappingURL=user-service.js.map