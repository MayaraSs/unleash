export = AddonService;
declare class AddonService {
    constructor({ addonStore, eventStore, featureToggleStore }: {
        addonStore: any;
        eventStore: any;
        featureToggleStore: any;
    }, config: any, tagTypeService: any);
    eventStore: any;
    addonStore: any;
    featureToggleStore: any;
    getLogger: any;
    logger: any;
    tagTypeService: any;
    addonProviders: {};
    sensitiveParams: any;
    fetchAddonConfigs: any;
    loadProviders(config: any): {};
    loadSensitiveParams(addonProviders: any): any;
    registerEventHandler(): void;
    handleEvent(eventName: any): (event: any) => void;
    getAddons(): Promise<any>;
    filterSensitiveFields(addonConfig: any): any;
    getAddon(id: any): Promise<any>;
    getProviderDefinition(): any[];
    addTagTypes(providerName: any): Promise<void | [any, any, any, any, any, any, any, any, any, any]>;
    createAddon(data: any, userName: any): Promise<any>;
    updateAddon(id: any, data: any, userName: any): Promise<void>;
    removeAddon(id: any, userName: any): Promise<void>;
    validateKnownProvider(config: any): Promise<boolean>;
    validateRequiredParameters({ provider, parameters }: {
        provider: any;
        parameters: any;
    }): Promise<boolean>;
}
