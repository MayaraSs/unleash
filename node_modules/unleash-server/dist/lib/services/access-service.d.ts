import { AccessStore, IRole, IUserPermission, IUserRole } from '../db/access-store';
import User from '../types/user';
export declare const ALL_PROJECTS = "*";
interface IStores {
    accessStore: AccessStore;
    userStore: any;
}
export interface IUserWithRole {
    id: number;
    roleId: number;
    name?: string;
    username?: string;
    email?: string;
    imageUrl?: string;
}
export interface IRoleData {
    role: IRole;
    users: User[];
    permissions: IUserPermission[];
}
export interface IPermission {
    name: string;
    type: PermissionType;
}
declare enum PermissionType {
    root = "root",
    project = "project"
}
export declare enum RoleName {
    ADMIN = "Admin",
    EDITOR = "Editor",
    VIEWER = "Viewer",
    OWNER = "Owner",
    MEMBER = "Member"
}
export declare enum RoleType {
    ROOT = "root",
    PROJECT = "project"
}
export interface IRoleIdentifier {
    roleId?: number;
    roleName?: RoleName;
}
export declare class AccessService {
    RoleName: typeof RoleName;
    private store;
    private userStore;
    private logger;
    private permissions;
    constructor({ accessStore, userStore }: IStores, { getLogger }: {
        getLogger: Function;
    });
    /**
     * Used to check if a user has access to the requested resource
     *
     * @param user
     * @param permission
     * @param projectId
     */
    hasPermission(user: User, permission: string, projectId?: string): Promise<boolean>;
    getPermissionsForUser(user: User): Promise<IUserPermission[]>;
    getPermissions(): IPermission[];
    addUserToRole(userId: number, roleId: number): Promise<void>;
    setUserRootRole(userId: number, role: number | RoleName): Promise<void>;
    getUserRootRoles(userId: number): Promise<IRole[]>;
    removeUserFromRole(userId: number, roleId: number): Promise<void>;
    addPermissionToRole(roleId: number, permission: string, projectId?: string): Promise<void>;
    removePermissionFromRole(roleId: number, permission: string, projectId?: string): Promise<void>;
    getRoles(): Promise<IRole[]>;
    getRole(roleId: number): Promise<IRoleData>;
    getRolesForProject(projectId: string): Promise<IRole[]>;
    getRolesForUser(userId: number): Promise<IRole[]>;
    getUsersForRole(roleId: number): Promise<User[]>;
    getProjectRoleUsers(projectId: string): Promise<[IRole[], IUserWithRole[]]>;
    createDefaultProjectRoles(owner: User, projectId: string): Promise<void>;
    removeDefaultProjectRoles(owner: User, projectId: string): Promise<void>;
    getRootRoleForAllUsers(): Promise<IUserRole[]>;
    getRootRoles(): Promise<IRole[]>;
    private resolveRootRole;
    getRootRole(roleName: RoleName): Promise<IRole>;
}
export {};
