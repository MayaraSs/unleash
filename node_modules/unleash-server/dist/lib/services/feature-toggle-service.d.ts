export = FeatureToggleService;
declare class FeatureToggleService {
    constructor({ featureToggleStore, tagStore, eventStore }: {
        featureToggleStore: any;
        tagStore: any;
        eventStore: any;
    }, { getLogger }: {
        getLogger: any;
    });
    featureToggleStore: any;
    tagStore: any;
    eventStore: any;
    logger: any;
    getFeatures(query: any, fields: any): Promise<any>;
    paramToArray(param: any): any;
    prepQuery({ tag, project, namePrefix }: {
        tag: any;
        project: any;
        namePrefix: any;
    }): Promise<any>;
    getArchivedFeatures(): Promise<any>;
    addArchivedFeature(feature: any): Promise<void>;
    deleteFeature(name: any): Promise<void>;
    getFeature(name: any): Promise<any>;
    createFeatureToggle(value: any, userName: any): Promise<any>;
    updateToggle(updatedFeature: any, userName: any): Promise<void>;
    archiveToggle(name: any, userName: any): Promise<void>;
    reviveToggle(name: any, userName: any): Promise<void>;
    toggle(featureName: any, userName: any): Promise<any>;
    /** Tag related  */
    listTags(featureName: any): Promise<any>;
    addTag(featureName: any, tag: any, userName: any): Promise<any>;
    createTagIfNeeded(tag: any, userName: any): Promise<void>;
    removeTag(featureName: any, tag: any, userName: any): Promise<void>;
    /** Validations  */
    validateName({ name }: {
        name: any;
    }): Promise<any>;
    validateUniqueFeatureName(name: any): Promise<void>;
    updateField(featureName: any, field: any, value: any, userName: any): Promise<any>;
    updateStale(featureName: any, isStale: any, userName: any): Promise<any>;
}
