"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const access_service_1 = require("./access-service");
const name_exists_error_1 = __importDefault(require("../error/name-exists-error"));
const invalid_operation_error_1 = __importDefault(require("../error/invalid-operation-error"));
const util_1 = require("../routes/admin-api/util");
const project_schema_1 = __importDefault(require("./project-schema"));
const notfound_error_1 = __importDefault(require("../error/notfound-error"));
const events_1 = require("../types/events");
const getCreatedBy = (user) => user.email || user.username;
const DEFAULT_PROJECT = 'default';
class ProjectService {
    constructor({ projectStore, eventStore, featureToggleStore, }, config, accessService) {
        this.projectStore = projectStore;
        this.accessService = accessService;
        this.eventStore = eventStore;
        this.featureToggleStore = featureToggleStore;
        this.logger = config.getLogger('services/project-service.js');
    }
    async getProjects() {
        return this.projectStore.getAll();
    }
    async getProject(id) {
        return this.projectStore.get(id);
    }
    async createProject(newProject, user) {
        const data = await project_schema_1.default.validateAsync(newProject);
        await this.validateUniqueId(data.id);
        await this.projectStore.create(data);
        await this.accessService.createDefaultProjectRoles(user, data.id);
        await this.eventStore.store({
            type: events_1.PROJECT_CREATED,
            createdBy: getCreatedBy(user),
            data,
        });
        return data;
    }
    async updateProject(updatedProject, user) {
        await this.projectStore.get(updatedProject.id);
        const project = await project_schema_1.default.validateAsync(updatedProject);
        await this.projectStore.update(project);
        await this.eventStore.store({
            type: events_1.PROJECT_UPDATED,
            createdBy: getCreatedBy(user),
            data: project,
        });
    }
    async deleteProject(id, user) {
        if (id === DEFAULT_PROJECT) {
            throw new invalid_operation_error_1.default('You can not delete the default project!');
        }
        const toggles = await this.featureToggleStore.getFeaturesBy({
            project: id,
            archived: 0,
        });
        if (toggles.length > 0) {
            throw new invalid_operation_error_1.default('You can not delete as project with active feature toggles');
        }
        await this.projectStore.delete(id);
        await this.eventStore.store({
            type: events_1.PROJECT_DELETED,
            createdBy: getCreatedBy(user),
            data: { id },
        });
        this.accessService.removeDefaultProjectRoles(user, id);
    }
    async validateId(id) {
        await util_1.nameType.validateAsync(id);
        await this.validateUniqueId(id);
        return true;
    }
    async validateUniqueId(id) {
        try {
            await this.projectStore.hasProject(id);
        }
        catch (error) {
            // No conflict, everything ok!
            return;
        }
        // Intentional throw here!
        throw new name_exists_error_1.default('A project with this id already exists.');
    }
    // RBAC methods
    async getUsersWithAccess(projectId) {
        const [roles, users] = await this.accessService.getProjectRoleUsers(projectId);
        return {
            roles,
            users,
        };
    }
    async addUser(projectId, roleId, userId) {
        const [roles, users] = await this.accessService.getProjectRoleUsers(projectId);
        const role = roles.find(r => r.id === roleId);
        if (!role) {
            throw new notfound_error_1.default(`Could not find roleId=${roleId} on project=${projectId}`);
        }
        const alreadyHasAccess = users.some(u => u.id === userId);
        if (alreadyHasAccess) {
            throw new Error(`User already have access to project=${projectId}`);
        }
        await this.accessService.addUserToRole(userId, role.id);
    }
    async removeUser(projectId, roleId, userId) {
        const roles = await this.accessService.getRolesForProject(projectId);
        const role = roles.find(r => r.id === roleId);
        if (!role) {
            throw new notfound_error_1.default(`Couldn't find roleId=${roleId} on project=${projectId}`);
        }
        if (role.name === access_service_1.RoleName.OWNER) {
            const users = await this.accessService.getUsersForRole(role.id);
            if (users.length < 2) {
                throw new Error('A project must have at least one owner');
            }
        }
        await this.accessService.removeUserFromRole(userId, role.id);
    }
}
exports.default = ProjectService;
module.exports = ProjectService;
//# sourceMappingURL=project-service.js.map