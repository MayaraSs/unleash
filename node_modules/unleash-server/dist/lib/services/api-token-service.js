"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiTokenService = void 0;
const crypto_1 = __importDefault(require("crypto"));
const api_token_store_1 = require("../db/api-token-store");
const permissions_1 = require("../types/permissions");
const api_user_1 = __importDefault(require("../types/api-user"));
const ONE_MINUTE = 60000;
class ApiTokenService {
    constructor(stores, config) {
        this.activeTokens = [];
        this.store = stores.apiTokenStore;
        this.logger = config.getLogger('/services/api-token-service.ts');
        this.fetchActiveTokens();
        this.timer = setInterval(() => this.fetchActiveTokens(), ONE_MINUTE).unref();
    }
    async fetchActiveTokens() {
        try {
            this.activeTokens = await this.getAllActiveTokens();
        }
        finally {
            // eslint-disable-next-line no-unsafe-finally
            return;
        }
    }
    async getAllTokens() {
        return this.store.getAll();
    }
    async getAllActiveTokens() {
        return this.store.getAllActive();
    }
    getUserForToken(secret) {
        const token = this.activeTokens.find(t => t.secret === secret);
        if (token) {
            const permissions = token.type === api_token_store_1.ApiTokenType.ADMIN ? [permissions_1.ADMIN] : [permissions_1.CLIENT];
            return new api_user_1.default({
                username: token.username,
                permissions,
            });
        }
        return undefined;
    }
    async updateExpiry(secret, expiresAt) {
        return this.store.setExpiry(secret, expiresAt);
    }
    async delete(secret) {
        return this.store.delete(secret);
    }
    async creteApiToken(creteTokenRequest) {
        const secret = this.generateSecretKey();
        const createNewToken = { ...creteTokenRequest, secret };
        return this.store.insert(createNewToken);
    }
    generateSecretKey() {
        return crypto_1.default.randomBytes(32).toString('hex');
    }
    destroy() {
        clearInterval(this.timer);
        this.timer = null;
    }
}
exports.ApiTokenService = ApiTokenService;
//# sourceMappingURL=api-token-service.js.map