export = ClientMetricsService;
declare class ClientMetricsService {
    constructor({ clientMetricsStore, strategyStore, featureToggleStore, clientApplicationsStore, clientInstanceStore, eventStore, }: {
        clientMetricsStore: any;
        strategyStore: any;
        featureToggleStore: any;
        clientApplicationsStore: any;
        clientInstanceStore: any;
        eventStore: any;
    }, { getLogger, bulkInterval, announcementInterval: appAnnouncementInterval, }: {
        getLogger: any;
        bulkInterval?: number;
        announcementInterval?: number;
    });
    globalCount: number;
    apps: {};
    strategyStore: any;
    toggleStore: any;
    clientAppStore: any;
    clientInstanceStore: any;
    clientMetricsStore: any;
    lastHourProjection: Projection;
    lastMinuteProjection: Projection;
    eventStore: any;
    lastHourList: TTLList;
    logger: any;
    lastMinuteList: TTLList;
    seenClients: {};
    bulkAddTimer: NodeJS.Timeout;
    announceTimer: NodeJS.Timeout;
    registerClientMetrics(data: any, clientIp: any): Promise<void>;
    announceUnannounced(): Promise<void>;
    registerClient(data: any, clientIp: any): Promise<void>;
    clientKey(client: any): string;
    bulkAdd(): Promise<void>;
    appToEvent(app: any): {
        type: string;
        createdBy: any;
        data: any;
    };
    getAppsWithToggles(): any[];
    getSeenTogglesByAppName(appName: any): string[];
    getSeenApps(): Promise<{}>;
    getApplications(query: any): Promise<any>;
    getApplication(appName: any): Promise<{
        appName: any;
        createdAt: any;
        description: any;
        url: any;
        color: any;
        icon: any;
        strategies: any;
        instances: any;
        seenToggles: any[];
        links: {
            self: string;
        };
    }>;
    getSeenAppsPerToggle(): {};
    getTogglesMetrics(): {
        lastHour: {};
        lastMinute: {};
    };
    addPayload(data: any): void;
    getApp(appName: any): any;
    createCountObject(entry: any): {
        yes: any;
        no: any;
    };
    addBucket(app: any, bucket: any): void;
    addSeenToggles(app: any, toggleNames: any): void;
    deleteApplication(appName: any): Promise<void>;
    createApplication(input: any): Promise<void>;
    destroy(): void;
}
import Projection = require("./projection");
import TTLList = require("./ttl-list");
