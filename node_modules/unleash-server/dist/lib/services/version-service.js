"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_fetch_1 = __importDefault(require("node-fetch"));
const version_1 = __importDefault(require("../util/version"));
const TWO_DAYS = 48 * 60 * 60 * 1000;
class VersionService {
    constructor({ settingStore }, { getLogger, versionCheck, enterpriseVersion, }) {
        this.logger = getLogger('lib/services/version-service.js');
        this.settingStore = settingStore;
        this.current = {
            oss: version_1.default,
            enterprise: enterpriseVersion || '',
        };
        this.enabled = versionCheck.enable;
        this.versionCheckUrl = versionCheck.url;
        this.isLatest = true;
        process.nextTick(() => this.setup());
    }
    async setup() {
        await this.setInstanceId();
        await this.checkLatestVersion();
        this.timer = setInterval(async () => this.checkLatestVersion(), TWO_DAYS);
        this.timer.unref();
    }
    async setInstanceId() {
        try {
            const { id } = await this.settingStore.get('instanceInfo');
            this.instanceId = id;
        }
        catch (err) {
            this.logger.warn('Could not find instanceInfo');
        }
    }
    async checkLatestVersion() {
        if (this.enabled) {
            try {
                const res = await node_fetch_1.default(this.versionCheckUrl, {
                    method: 'POST',
                    body: JSON.stringify({
                        versions: this.current,
                        instanceId: this.instanceId,
                    }),
                    headers: { 'Content-Type': 'application/json' },
                });
                if (res.ok) {
                    const data = await res.json();
                    this.latest = {
                        oss: data.versions.oss,
                        enterprise: data.versions.enterprise,
                    };
                    this.isLatest = data.latest;
                }
                else {
                    this.logger.info(`Could not check newest version. Status: ${res.status}`);
                }
            }
            catch (err) {
                this.logger.info('Could not check newest version', err);
            }
        }
    }
    getVersionInfo() {
        return {
            current: this.current,
            latest: this.latest || {},
            isLatest: this.isLatest,
            instanceId: this.instanceId,
        };
    }
    destroy() {
        clearInterval(this.timer);
        this.timer = null;
    }
}
exports.default = VersionService;
module.exports = VersionService;
//# sourceMappingURL=version-service.js.map