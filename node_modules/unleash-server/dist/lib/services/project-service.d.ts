import User from '../types/user';
import { AccessService, IUserWithRole } from './access-service';
import { IProject } from '../db/project-store';
import { IRole } from '../db/access-store';
import { IUnleashStores } from '../types/stores';
import { IUnleashConfig } from '../types/option';
export interface UsersWithRoles {
    users: IUserWithRole[];
    roles: IRole[];
}
export default class ProjectService {
    private projectStore;
    private accessService;
    private eventStore;
    private featureToggleStore;
    private logger;
    constructor({ projectStore, eventStore, featureToggleStore, }: Pick<IUnleashStores, 'projectStore' | 'eventStore' | 'featureToggleStore'>, config: IUnleashConfig, accessService: AccessService);
    getProjects(): Promise<IProject[]>;
    getProject(id: string): Promise<IProject>;
    createProject(newProject: IProject, user: User): Promise<IProject>;
    updateProject(updatedProject: IProject, user: User): Promise<void>;
    deleteProject(id: string, user: User): Promise<void>;
    validateId(id: string): Promise<boolean>;
    validateUniqueId(id: string): Promise<void>;
    getUsersWithAccess(projectId: string): Promise<UsersWithRoles>;
    addUser(projectId: string, roleId: number, userId: number): Promise<void>;
    removeUser(projectId: string, roleId: number, userId: number): Promise<void>;
}
