import { IApiToken, ApiTokenType } from '../db/api-token-store';
import { IUnleashStores } from '../types/stores';
import { IUnleashConfig } from '../types/option';
import ApiUser from '../types/api-user';
interface CreateTokenRequest {
    username: string;
    type: ApiTokenType;
    expiresAt?: Date;
}
export declare class ApiTokenService {
    private store;
    private logger;
    private timer;
    private activeTokens;
    constructor(stores: Pick<IUnleashStores, 'apiTokenStore'>, config: Pick<IUnleashConfig, 'getLogger'>);
    private fetchActiveTokens;
    getAllTokens(): Promise<IApiToken[]>;
    getAllActiveTokens(): Promise<IApiToken[]>;
    getUserForToken(secret: string): ApiUser | undefined;
    updateExpiry(secret: string, expiresAt: Date): Promise<IApiToken>;
    delete(secret: string): Promise<void>;
    creteApiToken(creteTokenRequest: CreateTokenRequest): Promise<IApiToken>;
    private generateSecretKey;
    destroy(): void;
}
export {};
