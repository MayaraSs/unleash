/// <reference types="node" />
import { URL } from 'url';
import { ResetTokenStore, IResetToken, IResetQuery } from '../db/reset-token-store';
import UserStore from '../db/user-store';
import { IUnleashConfig } from '../types/option';
interface IStores {
    resetTokenStore: ResetTokenStore;
    userStore: UserStore;
}
interface IInviteLinks {
    [key: string]: string;
}
export default class ResetTokenService {
    private store;
    private logger;
    private readonly unleashBase;
    constructor(stores: IStores, { getLogger, server }: Pick<IUnleashConfig, 'getLogger' | 'server'>);
    useAccessToken(token: IResetQuery): Promise<boolean>;
    getActiveInvitations(): Promise<IInviteLinks>;
    isValid(token: string): Promise<IResetToken>;
    private getExistingInvitationUrl;
    private createResetUrl;
    createResetPasswordUrl(forUser: number, creator: string): Promise<URL>;
    createNewUserUrl(forUser: number, creator: string): Promise<URL>;
    createToken(tokenUser: number, creator: string, expiryDelta?: number): Promise<IResetToken>;
    private generateToken;
}
export {};
