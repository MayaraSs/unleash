"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createConfig = exports.authTypeFromString = void 0;
const pg_connection_string_1 = require("pg-connection-string");
const deepmerge_1 = __importDefault(require("deepmerge"));
const fs = __importStar(require("fs"));
const option_1 = require("./types/option");
const logger_1 = require("./logger");
const default_custom_auth_deny_all_1 = require("./default-custom-auth-deny-all");
const format_base_uri_1 = require("./util/format-base-uri");
const safeToUpper = (s) => (s ? s.toUpperCase() : s);
function authTypeFromString(s, defaultType = option_1.IAuthType.OPEN_SOURCE) {
    return option_1.IAuthType[safeToUpper(s)] || defaultType;
}
exports.authTypeFromString = authTypeFromString;
function safeNumber(envVar, defaultVal) {
    if (envVar) {
        try {
            return Number.parseInt(envVar, 10);
        }
        catch (err) {
            return defaultVal;
        }
    }
    else {
        return defaultVal;
    }
}
function safeBoolean(envVar, defaultVal) {
    if (envVar) {
        return envVar === 'true' || envVar === '1' || envVar === 't';
    }
    return defaultVal;
}
function mergeAll(objects) {
    return deepmerge_1.default.all(objects.filter(i => i));
}
const defaultDbOptions = {
    user: process.env.DATABASE_USERNAME,
    password: process.env.DATABASE_PASSWORD,
    host: process.env.DATABASE_HOST,
    port: safeNumber(process.env.DATABASE_PORT, 5432),
    database: process.env.DATABASE_NAME || 'unleash',
    ssl: process.env.DATABASE_SSL != null
        ? JSON.parse(process.env.DATABASE_SSL)
        : { rejectUnauthorized: false },
    driver: 'postgres',
    version: process.env.DATABASE_VERSION,
    pool: {
        min: safeNumber(process.env.DATABASE_POOL_MIN, 0),
        max: safeNumber(process.env.DATABASE_POOL_MAX, 4),
        idleTimeoutMillis: safeNumber(process.env.DATABASE_POOL_IDLE_TIMEOUT_MS, 30000),
    },
    schema: process.env.DATABASE_SCHEMA || 'public',
    disableMigration: false,
};
const defaultSessionOption = {
    ttlHours: safeNumber(process.env.SESSION_TTL_HOURS, 48),
    db: true,
};
const defaultServerOption = {
    pipe: undefined,
    host: process.env.HTTP_HOST,
    port: safeNumber(process.env.HTTP_PORT || process.env.PORT, 4242),
    baseUriPath: format_base_uri_1.formatBaseUri(process.env.BASE_URI_PATH),
    unleashUrl: process.env.UNLEASH_URL || 'http://localhost:4242',
    serverMetrics: true,
    keepAliveTimeout: 60 * 1000,
    headersTimeout: 61 * 1000,
    enableRequestLogger: false,
    gracefulShutdownEnable: safeBoolean(process.env.GRACEFUL_SHUTDOWN_ENABLE, true),
    gracefulShutdownTimeout: safeNumber(process.env.GRACEFUL_SHUTDOWN_TIMEOUT, 1000),
    secret: process.env.UNLEASH_SECRET || 'super-secret',
};
const defaultVersionOption = {
    url: process.env.UNLEASH_VERSION_URL || 'https://version.unleash.run',
    enable: safeBoolean(process.env.CHECK_VERSION, true),
};
const defaultAuthentication = {
    enableApiToken: safeBoolean(process.env.AUTH_ENABLE_API_TOKEN, true),
    type: authTypeFromString(process.env.AUTH_TYPE),
    customAuthHandler: default_custom_auth_deny_all_1.defaultCustomAuthDenyAll,
    createAdminUser: true,
};
const defaultImport = {
    file: process.env.IMPORT_FILE,
    dropBeforeImport: safeBoolean(process.env.IMPORT_DROP_BEFORE_IMPORT, false),
    keepExisting: safeBoolean(process.env.IMPORT_KEEP_EXISTING, false),
};
const defaultEmail = {
    host: process.env.EMAIL_HOST,
    secure: safeBoolean(process.env.EMAIL_SECURE, false),
    port: safeNumber(process.env.EMAIL_PORT, 567),
    sender: process.env.EMAIL_SENDER || 'noreply@unleash-hosted.com',
    smtpuser: process.env.EMAIL_USER,
    smtppass: process.env.EMAIL_PASSWORD,
};
const dbPort = (dbConfig) => {
    if (typeof dbConfig.port === 'string') {
        // eslint-disable-next-line no-param-reassign
        dbConfig.port = Number.parseInt(dbConfig.port, 10);
    }
    return dbConfig;
};
const removeUndefinedKeys = (o) => Object.keys(o).reduce((a, key) => {
    if (o[key] !== undefined) {
        // eslint-disable-next-line no-param-reassign
        a[key] = o[key];
        return a;
    }
    return a;
}, {});
const formatServerOptions = (serverOptions) => {
    if (!serverOptions)
        return;
    /* eslint-disable-next-line */
    return {
        ...serverOptions,
        baseUriPath: format_base_uri_1.formatBaseUri(serverOptions.baseUriPath),
    };
};
function createConfig(options) {
    let extraDbOptions = {};
    if (options.databaseUrl) {
        extraDbOptions = pg_connection_string_1.parse(options.databaseUrl);
    }
    else if (process.env.DATABASE_URL) {
        extraDbOptions = pg_connection_string_1.parse(process.env.DATABASE_URL);
    }
    let fileDbOptions = {};
    if (options.databaseUrlFile && fs.existsSync(options.databaseUrlFile)) {
        fileDbOptions = pg_connection_string_1.parse(fs.readFileSync(options.databaseUrlFile, 'utf-8'));
    }
    else if (process.env.DATABASE_URL_FILE &&
        fs.existsSync(process.env.DATABASE_URL_FILE)) {
        fileDbOptions = pg_connection_string_1.parse(fs.readFileSync(process.env.DATABASE_URL_FILE, 'utf-8'));
    }
    const db = mergeAll([
        defaultDbOptions,
        dbPort(extraDbOptions),
        dbPort(fileDbOptions),
        options.db,
    ]);
    const session = mergeAll([
        defaultSessionOption,
        options.session,
    ]);
    const logLevel = options.logLevel || logger_1.LogLevel[process.env.LOG_LEVEL] || logger_1.LogLevel.error;
    const getLogger = options.getLogger || logger_1.getDefaultLogProvider(logLevel);
    logger_1.validateLogProvider(getLogger);
    const server = mergeAll([
        defaultServerOption,
        formatServerOptions(options.server),
    ]);
    const versionCheck = mergeAll([
        defaultVersionOption,
        options.versionCheck,
    ]);
    const authentication = mergeAll([
        defaultAuthentication,
        options.authentication
            ? removeUndefinedKeys(options.authentication)
            : options.authentication,
    ]);
    const ui = options.ui || {};
    const importSetting = mergeAll([
        defaultImport,
        options.import,
    ]);
    const experimental = options.experimental || {};
    const email = mergeAll([defaultEmail, options.email]);
    let listen;
    if (server.pipe) {
        listen = { path: server.pipe };
    }
    else {
        listen = { host: server.host || undefined, port: server.port };
    }
    const secureHeaders = options.secureHeaders || safeBoolean(process.env.SECURE_HEADERS, false);
    const enableOAS = options.enableOAS || safeBoolean(process.env.ENABLE_OAS, false);
    return {
        db,
        session,
        getLogger,
        server,
        listen,
        versionCheck,
        authentication,
        ui,
        import: importSetting,
        experimental: experimental || {},
        email,
        secureHeaders,
        enableOAS,
        preHook: options.preHook,
        preRouterHook: options.preRouterHook,
        eventHook: options.eventHook,
        enterpriseVersion: options.enterpriseVersion,
    };
}
exports.createConfig = createConfig;
module.exports = {
    createConfig,
    authTypeFromString,
};
//# sourceMappingURL=create-config.js.map