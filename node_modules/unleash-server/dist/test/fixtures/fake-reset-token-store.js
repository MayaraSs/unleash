"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResetTokenStoreMock = void 0;
const events_1 = require("events");
const reset_token_store_1 = require("../../lib/db/reset-token-store");
const no_logger_1 = __importDefault(require("./no-logger"));
const notfound_error_1 = __importDefault(require("../../lib/error/notfound-error"));
class ResetTokenStoreMock extends reset_token_store_1.ResetTokenStore {
    constructor() {
        super(undefined, new events_1.EventEmitter(), no_logger_1.default);
        this.data = [];
    }
    async getActive(token) {
        const row = this.data.find(tokens => tokens.token === token);
        if (!row) {
            throw new notfound_error_1.default();
        }
        return row;
    }
    async insert(newToken) {
        const token = {
            userId: newToken.user_id,
            token: newToken.reset_token,
            expiresAt: newToken.expires_at,
            createdBy: newToken.created_by,
            createdAt: new Date(),
        };
        this.data.push(token);
        return Promise.resolve(token);
    }
    async delete({ reset_token }) {
        this.data.splice(this.data.findIndex(token => token.token === reset_token), 1);
        return Promise.resolve();
    }
    async deleteExpired() {
        throw new Error('Not implemented in mock');
    }
}
exports.ResetTokenStoreMock = ResetTokenStoreMock;
//# sourceMappingURL=fake-reset-token-store.js.map