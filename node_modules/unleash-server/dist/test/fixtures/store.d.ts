import ClientMetricsStore = require("./fake-metrics-store");
export function createStores(databaseIsUp?: boolean): {
    db: {
        select: () => {
            from: () => Promise<void>;
        };
    };
    clientApplicationsStore: {
        upsert: (app: any) => Promise<void>;
        insertNewRow: (value: any) => Promise<void>;
        getApplications: () => Promise<any[]>;
        getApplication: (appName: any) => any;
        deleteApplication: (appName: any) => void;
    };
    clientMetricsStore: ClientMetricsStore;
    clientInstanceStore: {
        insert: () => Promise<void>;
        getApplications: () => Promise<any[]>;
        deleteForApplication: () => Promise<void>;
    };
    featureToggleStore: {
        getFeature: (name: any) => Promise<any>;
        hasFeature: (name: any) => Promise<{
            name: any;
            archived: boolean;
        }>;
        updateFeature: (updatedFeature: any) => void;
        archiveFeature: (feature: any) => void;
        createFeature: (feature: any) => number;
        getArchivedFeatures: () => Promise<any[]>;
        addArchivedFeature: (feature: any) => number;
        reviveFeature: (feature: any) => void;
        lastSeenToggles: (names?: any[]) => void;
        dropFeatures: () => void;
        deleteFeature: (featureName: any) => Promise<void>;
        importFeature: (feat: any) => Promise<number>;
        getFeatures: (query: any) => Promise<any[]>;
        tagFeature: (featureName: any, tag: any) => void;
        untagFeature: (event: any) => void;
        getAllTagsForFeature: (featureName: any) => Promise<{
            type: any;
            value: any;
        }[]>;
        getAllFeatureTags: () => Promise<any[]>;
        importFeatureTags: (tags: any) => Promise<any[]>;
        dropFeatureTags: () => Promise<void>;
    };
    tagStore: {
        getTagsByType: (type: any) => Promise<any[]>;
        createTag: (tag: any) => void;
        deleteTag: (tag: any) => void;
        getAll: () => Promise<any[]>;
        getTag: (type: any, value: any) => Promise<any>;
        bulkImport: (tags: any) => Promise<any[]>;
        dropTags: () => Promise<void>;
        exists: (tag: any) => Promise<boolean>;
    };
    tagTypeStore: {
        getTagType: (name: any) => Promise<any>;
        createTagType: (tag: any) => Promise<void>;
        getAll: () => Promise<any[]>;
        bulkImport: (tagTypes: any) => Promise<any[]>;
        dropTagTypes: () => Promise<void>;
        exists: (name: any) => Promise<boolean>;
    };
    eventStore: any;
    strategyStore: {
        getStrategies: () => Promise<{
            name: string;
            editable: boolean;
            parameters: {};
            deprecated: boolean;
        }[]>;
        getEditableStrategies: () => Promise<{
            name: string;
            editable: boolean;
            parameters: {};
            deprecated: boolean;
        }[]>;
        getStrategy: (name: any) => Promise<{
            name: string;
            editable: boolean;
            parameters: {};
            deprecated: boolean;
        }>;
        createStrategy: (strat: any) => number;
        updateStrategy: (strat: any) => void;
        importStrategy: (strat: any) => Promise<number>;
        dropStrategies: () => {
            name: string;
            editable: boolean;
            parameters: {};
            deprecated: boolean;
        }[];
        deleteStrategy: (strat: any) => {
            name: string;
            editable: boolean;
            parameters: {};
            deprecated: boolean;
        }[];
        deprecateStrategy: ({ name }: {
            name: any;
        }) => void;
        reactivateStrategy: ({ name }: {
            name: any;
        }) => void;
    };
    contextFieldStore: {
        getAll: () => Promise<{
            name: string;
        }[]>;
        get: (name: any) => Promise<{
            name: string;
        }>;
        create: (contextField: any) => number;
        update: (field: any) => void;
        delete: (name: any) => void;
    };
    settingStore: {
        insert: (setting: any) => Promise<void>;
        get: (name: any) => Promise<any>;
    };
    addonStore: {
        insert: (addon: any) => Promise<any>;
        update: (id: any, value: any) => Promise<void>;
        delete: (id: any) => Promise<void>;
        get: (id: any) => Promise<any>;
        getAll: () => Promise<any[]>;
    };
    projectStore: {
        create: (project: any) => Promise<void>;
        getAll: () => Promise<any[]>;
        importProjects: (projects: any) => Promise<any[]>;
        dropProjects: () => void;
        hasProject: (id: any) => Promise<any>;
    };
    userStore: any;
    accessStore: any;
    userFeedbackStore: any;
};
