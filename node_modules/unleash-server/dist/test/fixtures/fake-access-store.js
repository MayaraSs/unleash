"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/no-unused-vars */
const access_store_1 = require("../../lib/db/access-store");
const no_logger_1 = __importDefault(require("./no-logger"));
class AccessStoreMock extends access_store_1.AccessStore {
    constructor() {
        super(undefined, undefined, no_logger_1.default);
    }
    getPermissionsForUser(userId) {
        return Promise.resolve([]);
    }
    getPermissionsForRole(roleId) {
        throw new Error('Method not implemented.');
    }
    getRoles() {
        return Promise.resolve([]);
    }
    getRoleWithId(id) {
        throw new Error('Method not implemented.');
    }
    getRolesForProject(projectId) {
        throw new Error('Method not implemented.');
    }
    removeRolesForProject(projectId) {
        throw new Error('Method not implemented.');
    }
    getRolesForUserId(userId) {
        return Promise.resolve([]);
    }
    getUserIdsForRole(roleId) {
        throw new Error('Method not implemented.');
    }
    addUserToRole(userId, roleId) {
        throw new Error('Method not implemented.');
    }
    removeUserFromRole(userId, roleId) {
        throw new Error('Method not implemented.');
    }
    createRole(name, type, project, description) {
        throw new Error('Method not implemented.');
    }
    addPermissionsToRole(role_id, permissions, projectId) {
        throw new Error('Method not implemented.');
    }
    removePermissionFromRole(roleId, permission, projectId) {
        throw new Error('Method not implemented.');
    }
    getRootRoleForAllUsers() {
        throw new Error('Method not implemented.');
    }
}
module.exports = AccessStoreMock;
exports.default = AccessStoreMock;
//# sourceMappingURL=fake-access-store.js.map