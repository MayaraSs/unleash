"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const user_store_1 = __importDefault(require("../../lib/db/user-store"));
const no_logger_1 = __importDefault(require("./no-logger"));
class UserStoreMock extends user_store_1.default {
    constructor() {
        super(undefined, no_logger_1.default);
        this.idSeq = 1;
        this.data = [];
    }
    async hasUser({ id, username, email, }) {
        const user = this.data.find(i => {
            if (id && i.id === id)
                return true;
            if (username && i.username === username)
                return true;
            if (email && i.email === email)
                return true;
            return false;
        });
        return user;
    }
    async insert(user) {
        // eslint-disable-next-line no-param-reassign
        user.id = this.idSeq;
        this.idSeq += 1;
        this.data.push(user);
        return Promise.resolve(user);
    }
    async update(id, user) {
        // eslint-disable-next-line no-param-reassign
        this.data = this.data.map(o => {
            if (o.id === id)
                return { ...o, name: user.name };
            return o;
        });
        return Promise.resolve(user);
    }
    async get({ id, username, email }) {
        const user = this.data.find(i => {
            if (i.id && i.id === id)
                return true;
            if (i.username && i.username === username)
                return true;
            if (i.email && i.email === email)
                return true;
            return false;
        });
        if (user) {
            return user;
        }
        throw new Error('Could not find user');
    }
    async getAll() {
        return Promise.resolve(this.data);
    }
    async setPasswordHash(userId, passwordHash) {
        const u = this.data.find(a => a.id === userId);
        u.passwordHash = passwordHash;
        return Promise.resolve();
    }
    async getPasswordHash(id) {
        const u = this.data.find(i => i.id === id);
        return Promise.resolve(u.passwordHash);
    }
    async delete(id) {
        this.data = this.data.filter(item => item.id !== id);
        return Promise.resolve();
    }
    async successfullyLogin(user) {
        const u = this.data.find(i => i.id === user.id);
        u.login_attempts = 0;
        u.seen_at = new Date();
        return Promise.resolve();
    }
    buildSelectUser() {
        throw new Error('Not implemented');
    }
    async search() {
        throw new Error('Not implemented');
    }
    async getAllWithId() {
        throw new Error('Not implemented');
    }
    async incLoginAttempts() {
        throw new Error('Not implemented');
    }
}
module.exports = UserStoreMock;
exports.default = UserStoreMock;
//# sourceMappingURL=fake-user-store.js.map