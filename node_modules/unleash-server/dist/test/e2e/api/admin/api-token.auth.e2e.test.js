"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const test_helper_1 = require("../../helpers/test-helper");
const database_init_1 = __importDefault(require("../../helpers/database-init"));
const no_logger_1 = __importDefault(require("../../../fixtures/no-logger"));
const api_token_store_1 = require("../../../../lib/db/api-token-store");
const access_service_1 = require("../../../../lib/services/access-service");
let stores;
let db;
beforeAll(async () => {
    db = await database_init_1.default('token_api_auth_serial', no_logger_1.default);
    stores = db.stores;
});
afterAll(async () => {
    if (db) {
        await db.destroy();
    }
});
afterEach(async () => {
    await stores.apiTokenStore.deleteAll();
});
test('none-admins should only get client tokens', async () => {
    expect.assertions(2);
    const email = 'custom-user@mail.com';
    const preHook = (app, config, { userService, accessService }) => {
        app.use('/api/admin/', async (req, res, next) => {
            const role = await accessService.getRootRole(access_service_1.RoleName.EDITOR);
            const user = await userService.createUser({
                email,
                rootRole: role.id,
            });
            req.user = user;
            next();
        });
    };
    const { request, destroy } = await test_helper_1.setupAppWithCustomAuth(stores, preHook);
    await stores.apiTokenStore.insert({
        username: 'test',
        secret: '1234',
        type: api_token_store_1.ApiTokenType.CLIENT,
    });
    await stores.apiTokenStore.insert({
        username: 'test',
        secret: 'sdfsdf2d',
        type: api_token_store_1.ApiTokenType.ADMIN,
    });
    await request
        .get('/api/admin/api-tokens')
        .expect('Content-Type', /json/)
        .expect(200)
        .expect(res => {
        expect(res.body.tokens.length).toBe(1);
        expect(res.body.tokens[0].type).toBe(api_token_store_1.ApiTokenType.CLIENT);
    });
    await destroy();
});
test('Only token-admins should be allowed to create token', async () => {
    expect.assertions(0);
    const email = 'custom-user2@mail.com';
    const preHook = (app, config, { userService, accessService }) => {
        app.use('/api/admin/', async (req, res, next) => {
            const role = await accessService.getRootRole(access_service_1.RoleName.EDITOR);
            req.user = await userService.createUser({
                email,
                rootRole: role.id,
            });
            next();
        });
    };
    const { request, destroy } = await test_helper_1.setupAppWithCustomAuth(stores, preHook);
    await request
        .post('/api/admin/api-tokens')
        .send({
        username: 'default-admin',
        type: 'admin',
    })
        .set('Content-Type', 'application/json')
        .expect(403);
    await destroy();
});
test('Token-admin should be allowed to create token', async () => {
    expect.assertions(0);
    const email = 'custom-user3@mail.com';
    const preHook = (app, config, { userService, accessService }) => {
        app.use('/api/admin/', async (req, res, next) => {
            const role = await accessService.getRootRole(access_service_1.RoleName.ADMIN);
            req.user = await userService.createUser({
                email,
                rootRole: role.id,
            });
            next();
        });
    };
    const { request, destroy } = await test_helper_1.setupAppWithCustomAuth(stores, preHook);
    await request
        .post('/api/admin/api-tokens')
        .send({
        username: 'default-admin',
        type: 'admin',
    })
        .set('Content-Type', 'application/json')
        .expect(201);
    await destroy();
});
//# sourceMappingURL=api-token.auth.e2e.test.js.map