"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
const migrator_1 = __importDefault(require("../../../migrator"));
const db_1 = require("../../../lib/db");
const db_pool_1 = require("../../../lib/db/db-pool");
const database_config_1 = __importDefault(require("./database-config"));
const test_config_1 = require("../../config/test-config");
const database_json_1 = __importDefault(require("./database.json"));
const no_logger_1 = __importDefault(require("../../fixtures/no-logger"));
// require('db-migrate-shared').log.silence(false);
// because of migrator bug
delete process.env.DATABASE_URL;
// because of db-migrate bug (https://github.com/Unleash/unleash/issues/171)
process.setMaxListeners(0);
async function resetDatabase(knex) {
    return Promise.all([
        knex.table('strategies').del(),
        knex.table('features').del(),
        knex.table('client_applications').del(),
        knex.table('client_instances').del(),
        knex.table('context_fields').del(),
        knex.table('users').del(),
        knex.table('projects').del(),
        knex.table('tags').del(),
        knex.table('tag_types').del(),
        knex.table('addons').del(),
        knex.table('users').del(),
        knex.table('reset_tokens').del(),
    ]);
}
function createStrategies(store) {
    return database_json_1.default.strategies.map(s => store.createStrategy(s));
}
function createContextFields(store) {
    return database_json_1.default.contextFields.map(c => store.create(c));
}
function createApplications(store) {
    return database_json_1.default.applications.map(a => store.upsert(a));
}
function createClientInstance(store) {
    return database_json_1.default.clientInstances.map(i => store.insert(i));
}
function createProjects(store) {
    return database_json_1.default.projects.map(i => store.create(i));
}
function createFeatures(store) {
    return database_json_1.default.features.map(f => store.createFeature(f));
}
async function tagFeatures(tagStore, store) {
    await tagStore.createTag({ value: 'Tester', type: 'simple' });
    return database_json_1.default.features.map(f => store.tagFeature(f.name, {
        value: 'Tester',
        type: 'simple',
    }));
}
function createTagTypes(store) {
    return database_json_1.default.tag_types.map(t => store.createTagType(t));
}
async function setupDatabase(stores) {
    await Promise.all(createStrategies(stores.strategyStore));
    await Promise.all(createContextFields(stores.contextFieldStore));
    await Promise.all(createFeatures(stores.featureToggleStore));
    await Promise.all(createClientInstance(stores.clientInstanceStore));
    await Promise.all(createApplications(stores.clientApplicationsStore));
    await Promise.all(createProjects(stores.projectStore));
    await Promise.all(createTagTypes(stores.tagTypeStore));
    await tagFeatures(stores.tagStore, stores.featureToggleStore);
}
async function init(databaseSchema = 'test', getLogger = no_logger_1.default) {
    const config = test_config_1.createTestConfig({
        db: {
            ...database_config_1.default.getDb(),
            pool: { min: 2, max: 8 },
            schema: databaseSchema,
            ssl: false,
        },
        getLogger,
    });
    const db = db_pool_1.createDb(config);
    const eventBus = new events_1.EventEmitter();
    await db.raw(`DROP SCHEMA IF EXISTS ${config.db.schema} CASCADE`);
    await db.raw(`CREATE SCHEMA IF NOT EXISTS ${config.db.schema}`);
    // @ts-ignore
    await migrator_1.default({ ...config, databaseSchema: config.db.schema });
    await db.destroy();
    const stores = await db_1.createStores(config, eventBus);
    stores.clientMetricsStore.setMaxListeners(0);
    stores.eventStore.setMaxListeners(0);
    await resetDatabase(stores.db);
    await setupDatabase(stores);
    return {
        stores,
        reset: async () => {
            await resetDatabase(stores.db);
            await setupDatabase(stores);
        },
        destroy: async () => {
            const { clientInstanceStore, clientMetricsStore } = stores;
            return new Promise((resolve, reject) => {
                clientInstanceStore.destroy();
                clientMetricsStore.destroy();
                stores.db.destroy(error => (error ? reject(error) : resolve()));
            });
        },
    };
}
exports.default = init;
module.exports = init;
//# sourceMappingURL=database-init.js.map